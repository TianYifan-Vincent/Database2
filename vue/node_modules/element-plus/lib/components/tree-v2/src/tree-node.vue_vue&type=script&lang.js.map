{"version":3,"file":"tree-node.vue_vue&type=script&lang.js","sources":["../../../../../../packages/components/tree-v2/src/tree-node.vue"],"sourcesContent":["<template>\n  <div\n    ref=\"node$\"\n    class=\"el-tree-node\"\n    :class=\"{\n      'is-expanded': expanded,\n      'is-current': current,\n      'is-focusable': !disabled,\n      'is-checked': !disabled && checked,\n    }\"\n    role=\"treeitem\"\n    tabindex=\"-1\"\n    :aria-expanded=\"expanded\"\n    :aria-disabled=\"disabled\"\n    :aria-checked=\"checked\"\n    :data-key=\"node?.key\"\n    @click.stop=\"handleClick\"\n    @contextmenu=\"handleContextMenu\"\n  >\n    <div\n      class=\"el-tree-node__content\"\n      :style=\"{ paddingLeft: `${(node.level - 1) * indent}px` }\"\n    >\n      <el-icon\n        v-if=\"icon\"\n        :class=\"[\n          {\n            'is-leaf': node?.isLeaf,\n            'is-hidden': hiddenExpandIcon,\n            expanded: !node?.isLeaf && expanded,\n          },\n          'el-tree-node__expand-icon',\n        ]\"\n        @click.stop=\"handleExpandIconClick\"\n      >\n        <component :is=\"icon\" />\n      </el-icon>\n      <el-checkbox\n        v-if=\"showCheckbox\"\n        :model-value=\"checked\"\n        :indeterminate=\"indeterminate\"\n        :disabled=\"disabled\"\n        @change=\"handleCheckChange\"\n        @click.stop\n      />\n      <el-node-content :node=\"node\" />\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, inject } from 'vue'\nimport { CaretRight } from '@element-plus/icons'\nimport ElIcon from '@element-plus/components/icon'\nimport ElCheckbox from '@element-plus/components/checkbox'\nimport ElNodeContent from './tree-node-content'\nimport {\n  ROOT_TREE_INJECTION_KEY,\n  NODE_CONTEXTMENU,\n  treeNodeEmits,\n  treeNodeProps,\n} from './virtual-tree'\n\nconst DEFAULT_ICON = 'caret-right'\n\nexport default defineComponent({\n  name: 'ElTreeNode',\n  components: {\n    ElIcon,\n    CaretRight,\n    ElCheckbox,\n    ElNodeContent,\n  },\n  props: treeNodeProps,\n  emits: treeNodeEmits,\n  setup(props, { emit }) {\n    const tree = inject(ROOT_TREE_INJECTION_KEY)\n\n    const indent = computed(() => {\n      return tree?.props.indent ?? 16\n    })\n\n    const icon = computed(() => {\n      return tree?.props.icon ?? DEFAULT_ICON\n    })\n\n    const handleClick = () => {\n      emit('click', props.node)\n    }\n    const handleExpandIconClick = () => {\n      emit('toggle', props.node)\n    }\n    const handleCheckChange = (value: boolean) => {\n      emit('check', props.node, value)\n    }\n    const handleContextMenu = (event: Event) => {\n      if (tree?.instance?.vnode?.props?.['onNodeContextmenu']) {\n        event.stopPropagation()\n        event.preventDefault()\n      }\n      tree?.ctx.emit(NODE_CONTEXTMENU, event, props.node?.data, props.node)\n    }\n\n    return {\n      indent,\n      icon,\n      handleClick,\n      handleExpandIconClick,\n      handleCheckChange,\n      handleContextMenu,\n    }\n  },\n})\n</script>\n"],"names":["defineComponent","ElIcon","CaretRight","ElCheckbox","ElNodeContent","treeNodeProps","treeNodeEmits","inject","ROOT_TREE_INJECTION_KEY","computed","NODE_CONTEXTMENU"],"mappings":";;;;;;;;;;;AA+DA,MAAM,eAAe;AAErB,aAAeA,oBAAgB;AAAA,EAC7B,MAAM;AAAA,EACN,YAAY;AAAA,YACVC;AAAA,gBACAC;AAAA,gBACAC;AAAA,mBACAC;AAAA;AAAA,EAEF,OAAOC;AAAA,EACP,OAAOC;AAAA,EACP,MAAM,OAAO,EAAE,QAAQ;AACrB,UAAM,OAAOC,WAAOC;AAEpB,UAAM,SAASC,aAAS,MAAM;;AAC5B,aAAO,mCAAM,MAAM,WAAZ,YAAsB;AAAA;AAG/B,UAAM,OAAOA,aAAS,MAAM;;AAC1B,aAAO,mCAAM,MAAM,SAAZ,YAAoB;AAAA;AAG7B,UAAM,cAAc,MAAM;AACxB,WAAK,SAAS,MAAM;AAAA;AAEtB,UAAM,wBAAwB,MAAM;AAClC,WAAK,UAAU,MAAM;AAAA;AAEvB,UAAM,oBAAoB,CAAC,UAAmB;AAC5C,WAAK,SAAS,MAAM,MAAM;AAAA;AAE5B,UAAM,oBAAoB,CAAC,UAAiB;;AAC1C,UAAI,+CAAM,aAAN,mBAAgB,UAAhB,mBAAuB,UAAvB,mBAA+B,sBAAsB;AACvD,cAAM;AACN,cAAM;AAAA;AAER,mCAAM,IAAI,KAAKC,8BAAkB,OAAO,YAAM,SAAN,mBAAY,MAAM,MAAM;AAAA;AAGlE,WAAO;AAAA,MACL;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA;AAAA;AAAA;;;;"}