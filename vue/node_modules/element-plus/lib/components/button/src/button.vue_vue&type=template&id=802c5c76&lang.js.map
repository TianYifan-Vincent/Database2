{"version":3,"file":"button.vue_vue&type=template&id=802c5c76&lang.js","sources":["../../../../../../packages/components/button/src/button.vue?vue&type=template&id=802c5c76&lang.js"],"sourcesContent":["<template>\n  <button\n    :class=\"[\n      'el-button',\n      buttonType ? 'el-button--' + buttonType : '',\n      buttonSize ? 'el-button--' + buttonSize : '',\n      {\n        'is-disabled': buttonDisabled,\n        'is-loading': loading,\n        'is-plain': plain,\n        'is-round': round,\n        'is-circle': circle,\n      },\n    ]\"\n    :disabled=\"buttonDisabled || loading\"\n    :autofocus=\"autofocus\"\n    :type=\"nativeType\"\n    @click=\"handleClick\"\n  >\n    <el-icon v-if=\"loading\" class=\"is-loading\"><loading /></el-icon>\n    <el-icon v-else-if=\"icon\">\n      <component :is=\"icon\" />\n    </el-icon>\n    <span\n      v-if=\"$slots.default\"\n      :class=\"{ 'el-button__text--expand': shouldAddSpace }\"\n    >\n      <slot></slot>\n    </span>\n  </button>\n</template>\n\n<script lang=\"ts\">\nimport { computed, inject, defineComponent, Text } from 'vue'\nimport { ElIcon } from '@element-plus/components/icon'\nimport { useFormItem, useGlobalConfig } from '@element-plus/hooks'\nimport { elButtonGroupKey, elFormKey } from '@element-plus/tokens'\nimport { Loading } from '@element-plus/icons'\nimport { buttonEmits, buttonProps } from './button'\n\nexport default defineComponent({\n  name: 'ElButton',\n\n  components: {\n    ElIcon,\n    Loading,\n  },\n\n  props: buttonProps,\n  emits: buttonEmits,\n\n  setup(props, { emit, slots }) {\n    const elBtnGroup = inject(elButtonGroupKey, undefined)\n    const globalConfig = useGlobalConfig()\n    const autoInsertSpace = computed(() => {\n      return props.autoInsertSpace ?? globalConfig?.button.autoInsertSpace\n    })\n\n    // add space between two characters in Chinese\n    const shouldAddSpace = computed(() => {\n      const defaultSlot = slots.default?.()\n      if (autoInsertSpace.value && defaultSlot?.length === 1) {\n        const slot = defaultSlot[0]\n        if (slot?.type === Text) {\n          const text = slot.children\n          return /^\\p{Unified_Ideograph}{2}$/u.test(text as string)\n        }\n      }\n      return false\n    })\n    const { size: buttonSize, disabled: buttonDisabled } = useFormItem({\n      size: computed(() => elBtnGroup?.size),\n    })\n    const buttonType = computed(\n      () => props.type || elBtnGroup?.type || 'default'\n    )\n\n    const elForm = inject(elFormKey, undefined)\n\n    const handleClick = (evt: MouseEvent) => {\n      if (props.nativeType === 'reset') {\n        elForm?.resetFields()\n      }\n      emit('click', evt)\n    }\n\n    return {\n      buttonSize,\n      buttonType,\n      buttonDisabled,\n\n      shouldAddSpace,\n\n      handleClick,\n    }\n  },\n})\n</script>\n"],"names":["_createElementBlock","_createBlock","_createVNode","_renderSlot"],"mappings":";;;;;;;;;;0BACEA;IACG;;;;;;;;;;;;IAYA,UAAU,uBAAkB;IAC5B,WAAW;IACX,MAAM;IACN,gDAAO;;IAEO,iCAAfC;;MAAwB,OAAM;AAAA;2BAAa;QAAAC,gBAAW;AAAA;AAAA;UAClC,8BAApBD;2BACE;0BAAAA,4CAAgB;;;;IAGV,YAAO,4BADfD;;MAEG,uDAAoC;;MAErCG;;;;;;;"}