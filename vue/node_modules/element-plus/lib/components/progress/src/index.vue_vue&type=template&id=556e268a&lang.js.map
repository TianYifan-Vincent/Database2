{"version":3,"file":"index.vue_vue&type=template&id=556e268a&lang.js","sources":["../../../../../../packages/components/progress/src/index.vue?vue&type=template&id=556e268a&lang.js"],"sourcesContent":["<template>\n  <div\n    class=\"el-progress\"\n    :class=\"[\n      `el-progress--${type}`,\n      status ? `is-${status}` : '',\n      {\n        'el-progress--without-text': !showText,\n        'el-progress--text-inside': textInside,\n      },\n    ]\"\n    role=\"progressbar\"\n    :aria-valuenow=\"percentage\"\n    aria-valuemin=\"0\"\n    aria-valuemax=\"100\"\n  >\n    <div v-if=\"type === 'line'\" class=\"el-progress-bar\">\n      <div\n        class=\"el-progress-bar__outer\"\n        :style=\"{ height: `${strokeWidth}px` }\"\n      >\n        <div\n          :class=\"[\n            'el-progress-bar__inner',\n            { 'el-progress-bar__inner--indeterminate': indeterminate },\n          ]\"\n          :style=\"barStyle\"\n        >\n          <div\n            v-if=\"(showText || $slots.default) && textInside\"\n            class=\"el-progress-bar__innerText\"\n          >\n            <slot v-bind=\"slotData\">\n              <span>{{ content }}</span>\n            </slot>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div\n      v-else\n      class=\"el-progress-circle\"\n      :style=\"{ height: `${width}px`, width: `${width}px` }\"\n    >\n      <svg viewBox=\"0 0 100 100\">\n        <path\n          class=\"el-progress-circle__track\"\n          :d=\"trackPath\"\n          stroke=\"#e5e9f2\"\n          :stroke-width=\"relativeStrokeWidth\"\n          fill=\"none\"\n          :style=\"trailPathStyle\"\n        />\n        <path\n          class=\"el-progress-circle__path\"\n          :d=\"trackPath\"\n          :stroke=\"stroke\"\n          fill=\"none\"\n          :stroke-linecap=\"strokeLinecap\"\n          :stroke-width=\"percentage ? relativeStrokeWidth : 0\"\n          :style=\"circlePathStyle\"\n        />\n      </svg>\n    </div>\n    <div\n      v-if=\"(showText || $slots.default) && !textInside\"\n      class=\"el-progress__text\"\n      :style=\"{ fontSize: `${progressTextSize}px` }\"\n    >\n      <slot v-bind=\"slotData\">\n        <span v-if=\"!status\">{{ content }}</span>\n        <el-icon v-else><component :is=\"statusIcon\" /></el-icon>\n      </slot>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent } from 'vue'\nimport { ElIcon } from '@element-plus/components/icon'\nimport {\n  WarningFilled,\n  CircleCheck,\n  CircleClose,\n  Check,\n  Close,\n} from '@element-plus/icons'\n\nimport type { PropType, SVGAttributes } from 'vue'\n\ntype ProgressFuncType = (percentage: number) => string\n\ninterface IProgressProps {\n  type: string\n  percentage: number\n  status: string\n  indeterminate: boolean\n  duration: number\n  strokeWidth: number\n  strokeLinecap: NonNullable<SVGAttributes['stroke-linecap']>\n  textInside: boolean\n  width: number\n  showText: boolean\n  color:\n    | string\n    | Array<string | { color: string; percentage: number }>\n    | ProgressFuncType\n  format: ProgressFuncType\n}\n\nexport default defineComponent({\n  name: 'ElProgress',\n  components: {\n    ElIcon,\n    CircleCheck,\n    CircleClose,\n    Check,\n    Close,\n    WarningFilled,\n  },\n  props: {\n    type: {\n      type: String,\n      default: 'line',\n      validator: (val: string): boolean =>\n        ['line', 'circle', 'dashboard'].indexOf(val) > -1,\n    },\n    percentage: {\n      type: Number,\n      default: 0,\n      validator: (val: number): boolean => val >= 0 && val <= 100,\n    },\n    status: {\n      type: String,\n      default: '',\n      validator: (val: string): boolean =>\n        ['', 'success', 'exception', 'warning'].indexOf(val) > -1,\n    },\n    indeterminate: {\n      type: Boolean,\n      default: false,\n    },\n    duration: {\n      type: Number,\n      default: 3,\n    },\n    strokeWidth: {\n      type: Number,\n      default: 6,\n    },\n    strokeLinecap: {\n      type: String as PropType<IProgressProps['strokeLinecap']>,\n      default: 'round' as IProgressProps['strokeLinecap'],\n    },\n    textInside: {\n      type: Boolean,\n      default: false,\n    },\n    width: {\n      type: Number,\n      default: 126,\n    },\n    showText: {\n      type: Boolean,\n      default: true,\n    },\n    color: {\n      type: [String, Array, Function],\n      default: '',\n    },\n    format: {\n      type: Function,\n      default: (percentage: number): string => `${percentage}%`,\n    },\n  },\n  setup(props: IProgressProps) {\n    const barStyle = computed(() => {\n      return {\n        width: `${props.percentage}%`,\n        animationDuration: `${props.duration}s`,\n        backgroundColor: getCurrentColor(props.percentage),\n      }\n    })\n\n    const relativeStrokeWidth = computed(() => {\n      return ((props.strokeWidth / props.width) * 100).toFixed(1)\n    })\n\n    const radius = computed(() => {\n      if (props.type === 'circle' || props.type === 'dashboard') {\n        return parseInt(`${50 - parseFloat(relativeStrokeWidth.value) / 2}`, 10)\n      } else {\n        return 0\n      }\n    })\n\n    const trackPath = computed(() => {\n      const r = radius.value\n      const isDashboard = props.type === 'dashboard'\n      return `\n          M 50 50\n          m 0 ${isDashboard ? '' : '-'}${r}\n          a ${r} ${r} 0 1 1 0 ${isDashboard ? '-' : ''}${r * 2}\n          a ${r} ${r} 0 1 1 0 ${isDashboard ? '' : '-'}${r * 2}\n          `\n    })\n\n    const perimeter = computed(() => {\n      return 2 * Math.PI * radius.value\n    })\n\n    const rate = computed(() => {\n      return props.type === 'dashboard' ? 0.75 : 1\n    })\n\n    const strokeDashoffset = computed(() => {\n      const offset = (-1 * perimeter.value * (1 - rate.value)) / 2\n      return `${offset}px`\n    })\n\n    const trailPathStyle = computed(() => {\n      return {\n        strokeDasharray: `${perimeter.value * rate.value}px, ${\n          perimeter.value\n        }px`,\n        strokeDashoffset: strokeDashoffset.value,\n      }\n    })\n\n    const circlePathStyle = computed(() => {\n      return {\n        strokeDasharray: `${\n          perimeter.value * rate.value * (props.percentage / 100)\n        }px, ${perimeter.value}px`,\n        strokeDashoffset: strokeDashoffset.value,\n        transition: 'stroke-dasharray 0.6s ease 0s, stroke 0.6s ease',\n      }\n    })\n\n    const stroke = computed(() => {\n      let ret\n      if (props.color) {\n        ret = getCurrentColor(props.percentage)\n      } else {\n        switch (props.status) {\n          case 'success':\n            ret = '#13ce66'\n            break\n          case 'exception':\n            ret = '#ff4949'\n            break\n          case 'warning':\n            ret = '#e6a23c'\n            break\n          default:\n            ret = '#20a0ff'\n        }\n      }\n      return ret\n    })\n\n    const statusIcon = computed(() => {\n      if (props.status === 'warning') {\n        return WarningFilled\n      }\n      if (props.type === 'line') {\n        return props.status === 'success' ? CircleCheck : CircleClose\n      } else {\n        return props.status === 'success' ? Check : Close\n      }\n    })\n\n    const progressTextSize = computed(() => {\n      return props.type === 'line'\n        ? 12 + props.strokeWidth * 0.4\n        : props.width * 0.111111 + 2\n    })\n\n    const content = computed(() => {\n      return props.format(props.percentage)\n    })\n\n    const getCurrentColor = (percentage) => {\n      const { color } = props\n      if (typeof color === 'function') {\n        return color(percentage)\n      } else if (typeof color === 'string') {\n        return color\n      } else {\n        const span = 100 / color.length\n        const seriesColors = color.map((seriesColor, index) => {\n          if (typeof seriesColor === 'string') {\n            return {\n              color: seriesColor,\n              percentage: (index + 1) * span,\n            }\n          }\n          return seriesColor\n        })\n        const colorArray = seriesColors.sort(\n          (a, b) => a.percentage - b.percentage\n        )\n\n        for (let i = 0; i < colorArray.length; i++) {\n          if (colorArray[i].percentage > percentage) {\n            return colorArray[i].color\n          }\n        }\n        return colorArray[colorArray.length - 1]?.color\n      }\n    }\n\n    const slotData = computed(() => {\n      return {\n        percentage: props.percentage,\n      }\n    })\n\n    return {\n      barStyle,\n      relativeStrokeWidth,\n      radius,\n      trackPath,\n      perimeter,\n      rate,\n      strokeDashoffset,\n      trailPathStyle,\n      circlePathStyle,\n      stroke,\n      statusIcon,\n      progressTextSize,\n      content,\n      getCurrentColor,\n      slotData,\n    }\n  },\n})\n</script>\n"],"names":["_createElementBlock","_createElementVNode","_renderSlot","_createBlock","_resolveDynamicComponent"],"mappings":";;;;;;;;;EAgBgC,OAAM;AAAA;;;EAc1B,OAAM;AAAA;qBAcP,SAAQ;;;;;;0BA3CjBA;IACE,2BAAM;;;;;;;;IASN,MAAK;AAAA,IACJ,iBAAe;IAChB,iBAAc;AAAA,IACd,iBAAc;AAAA;IAEH,yCAAXA,8BAAA;MACEC;QACE,OAAM;AAAA,QACL,uCAAoB;;QAErBA;UACG;;;;UAIA,0BAAO;;UAGC,kBAAY,YAAO,YAAY,oCADxCD,8BAAA;YAIEE,iFAAc,iBAAd;cACED,yDAAS;;;;;4BAMnBD;;MAEE,OAAM;AAAA,MACL,uCAAoB,0BAAqB;;wBAE1CA,8BAAA;QACEC;UACE,OAAM;AAAA,UACL,GAAG;UACJ,QAAO;AAAA,UACN,gBAAc;UACf,MAAK;AAAA,UACJ,0BAAO;;QAEVA;UACE,OAAM;AAAA,UACL,GAAG;UACH,QAAQ;UACT,MAAK;AAAA,UACJ,kBAAgB;UAChB,gBAAc,kBAAa;UAC3B,0BAAO;;;;IAKL,kBAAY,YAAO,aAAa,oCADzCD;;MAEE,OAAM;AAAA,MACL,yCAAsB;;MAEvBE,iFAAc,iBAAd;SACe,gCAAbF,+DAAwB,uCACxBG;+BAAgB;8BAAAA,gBAA8BC,4BAAd;;;;;;;;;;;"}