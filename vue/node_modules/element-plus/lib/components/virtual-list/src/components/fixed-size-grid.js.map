{"version":3,"file":"fixed-size-grid.js","sources":["../../../../../../../packages/components/virtual-list/src/components/fixed-size-grid.ts"],"sourcesContent":["import { isNumber } from '@element-plus/utils/util'\nimport { throwError } from '@element-plus/utils/error'\nimport createGrid from '../builders/build-grid'\n\nimport {\n  AUTO_ALIGNMENT,\n  SMART_ALIGNMENT,\n  START_ALIGNMENT,\n  CENTERED_ALIGNMENT,\n  END_ALIGNMENT,\n} from '../defaults'\n\nconst SCOPE = 'ElFixedSizeGrid'\n\nconst FixedSizeGrid = createGrid({\n  name: 'ElFixedSizeGrid',\n  getColumnPosition: ({ columnWidth }, index) => [\n    columnWidth as number,\n    index * (columnWidth as number),\n  ],\n\n  getRowPosition: ({ rowHeight }, index) => [\n    rowHeight as number,\n    index * (rowHeight as number),\n  ],\n\n  getEstimatedTotalHeight: ({ totalRow, rowHeight }) =>\n    (rowHeight as number) * totalRow,\n\n  getEstimatedTotalWidth: ({ totalColumn, columnWidth }) =>\n    (columnWidth as number) * totalColumn,\n\n  getColumnOffset: (\n    { totalColumn, columnWidth, width },\n    columnIndex,\n    alignment,\n    scrollLeft,\n    _,\n    scrollBarWidth\n  ) => {\n    width = Number(width)\n    const lastColumnOffset = Math.max(\n      0,\n      totalColumn * (columnWidth as number) - width\n    )\n    const maxOffset = Math.min(\n      lastColumnOffset,\n      columnIndex * (columnWidth as number)\n    )\n    const minOffset = Math.max(\n      0,\n      columnIndex * (columnWidth as number) -\n        width +\n        scrollBarWidth +\n        (columnWidth as number)\n    )\n\n    if (alignment === 'smart') {\n      if (scrollLeft >= minOffset - width && scrollLeft <= maxOffset + width) {\n        alignment = AUTO_ALIGNMENT\n      } else {\n        alignment = CENTERED_ALIGNMENT\n      }\n    }\n\n    switch (alignment) {\n      case START_ALIGNMENT:\n        return maxOffset\n      case END_ALIGNMENT:\n        return minOffset\n      case CENTERED_ALIGNMENT: {\n        const middleOffset = Math.round(minOffset + (maxOffset - minOffset) / 2)\n        if (middleOffset < Math.ceil(width / 2)) {\n          return 0\n        } else if (middleOffset > lastColumnOffset + Math.floor(width / 2)) {\n          return lastColumnOffset\n        } else {\n          return middleOffset\n        }\n      }\n      case AUTO_ALIGNMENT:\n      default:\n        if (scrollLeft >= minOffset && scrollLeft <= maxOffset) {\n          return scrollLeft\n        } else if (minOffset > maxOffset) {\n          return minOffset\n        } else if (scrollLeft < minOffset) {\n          return minOffset\n        } else {\n          return maxOffset\n        }\n    }\n  },\n\n  getRowOffset: (\n    { rowHeight, height, totalRow },\n    rowIndex,\n    align,\n    scrollTop,\n    _,\n    scrollBarWidth\n  ): number => {\n    height = Number(height)\n    const lastRowOffset = Math.max(0, totalRow * (rowHeight as number) - height)\n    const maxOffset = Math.min(lastRowOffset, rowIndex * (rowHeight as number))\n    const minOffset = Math.max(\n      0,\n      rowIndex * (rowHeight as number) -\n        height +\n        scrollBarWidth +\n        (rowHeight as number)\n    )\n\n    if (align === SMART_ALIGNMENT) {\n      if (scrollTop >= minOffset - height && scrollTop <= maxOffset + height) {\n        align = AUTO_ALIGNMENT\n      } else {\n        align = CENTERED_ALIGNMENT\n      }\n    }\n\n    switch (align) {\n      case START_ALIGNMENT:\n        return maxOffset\n      case END_ALIGNMENT:\n        return minOffset\n      case CENTERED_ALIGNMENT: {\n        const middleOffset = Math.round(minOffset + (maxOffset - minOffset) / 2)\n        if (middleOffset < Math.ceil(height / 2)) {\n          return 0\n        } else if (middleOffset > lastRowOffset + Math.floor(height / 2)) {\n          return lastRowOffset\n        } else {\n          return middleOffset\n        }\n      }\n      case AUTO_ALIGNMENT:\n      default:\n        if (scrollTop >= minOffset && scrollTop <= maxOffset) {\n          return scrollTop\n        } else if (minOffset > maxOffset) {\n          return minOffset\n        } else if (scrollTop < minOffset) {\n          return minOffset\n        } else {\n          return maxOffset\n        }\n    }\n  },\n\n  getColumnStartIndexForOffset: ({ columnWidth, totalColumn }, scrollLeft) =>\n    Math.max(\n      0,\n      Math.min(\n        totalColumn - 1,\n        Math.floor(scrollLeft / (columnWidth as number))\n      )\n    ),\n\n  getColumnStopIndexForStartIndex: (\n    { columnWidth, totalColumn, width },\n    startIndex: number,\n    scrollLeft: number\n  ): number => {\n    const left = startIndex * (columnWidth as number)\n    const visibleColumnsCount = Math.ceil(\n      ((width as number) + scrollLeft - left) / (columnWidth as number)\n    )\n    return Math.max(\n      0,\n      Math.min(totalColumn - 1, startIndex + visibleColumnsCount - 1)\n    )\n  },\n\n  getRowStartIndexForOffset: (\n    { rowHeight, totalRow },\n    scrollTop: number\n  ): number =>\n    Math.max(\n      0,\n      Math.min(totalRow - 1, Math.floor(scrollTop / (rowHeight as number)))\n    ),\n\n  getRowStopIndexForStartIndex: (\n    { rowHeight, totalRow, height },\n    startIndex: number,\n    scrollTop: number\n  ): number => {\n    const top = startIndex * (rowHeight as number)\n    const numVisibleRows = Math.ceil(\n      ((height as number) + scrollTop - top) / (rowHeight as number)\n    )\n    return Math.max(\n      0,\n      Math.min(\n        totalRow - 1,\n        startIndex + numVisibleRows - 1 // -1 is because stop index is inclusive\n      )\n    )\n  },\n  /**\n   * Fixed size grid does not need this cache\n   * Using any to bypass it, TODO: Using type inference to fix this.\n   */\n  initCache: () => undefined as any,\n\n  clearCache: true,\n\n  validateProps: ({ columnWidth, rowHeight }) => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!isNumber(columnWidth)) {\n        throwError(\n          SCOPE,\n          `\n          \"columnWidth\" must be passed as number,\n            instead ${typeof columnWidth} was given.\n        `\n        )\n      }\n\n      if (!isNumber(rowHeight)) {\n        throwError(\n          SCOPE,\n          `\n          \"columnWidth\" must be passed as number,\n            instead ${typeof rowHeight} was given.\n        `\n        )\n      }\n    }\n  },\n})\n\nexport default FixedSizeGrid\n"],"names":["createGrid","AUTO_ALIGNMENT","CENTERED_ALIGNMENT","START_ALIGNMENT","END_ALIGNMENT","SMART_ALIGNMENT","isNumber"],"mappings":"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"}