{"version":3,"file":"fixed-size-list.js","sources":["../../../../../../../packages/components/virtual-list/src/components/fixed-size-list.ts"],"sourcesContent":["import { isString } from '@element-plus/utils/util'\nimport { throwError } from '@element-plus/utils/error'\nimport buildList from '../builders/build-list'\nimport { isHorizontal } from '../utils'\nimport {\n  SMART_ALIGNMENT,\n  AUTO_ALIGNMENT,\n  START_ALIGNMENT,\n  END_ALIGNMENT,\n  CENTERED_ALIGNMENT,\n} from '../defaults'\n\nimport type { VirtualizedListProps } from '../props'\n\ntype Props = VirtualizedListProps\n\nconst FixedSizeList = buildList({\n  name: 'ElFixedSizeList',\n  getItemOffset: ({ itemSize }, index) => index * (itemSize as number),\n\n  getItemSize: ({ itemSize }) => itemSize as number,\n\n  getEstimatedTotalSize: ({ total, itemSize }) => (itemSize as number) * total,\n\n  getOffset: (\n    { height, total, itemSize, layout, width },\n    index,\n    alignment,\n    scrollOffset\n  ) => {\n    const size = (isHorizontal(layout) ? width : height) as number\n    if (process.env.NODE_ENV !== 'production' && isString(size)) {\n      throwError(\n        '[ElVirtualList]',\n        `\n        You should set\n          width/height\n        to number when your layout is\n          horizontal/vertical\n      `\n      )\n    }\n    const lastItemOffset = Math.max(0, total * (itemSize as number) - size)\n    const maxOffset = Math.min(lastItemOffset, index * (itemSize as number))\n    const minOffset = Math.max(0, (index + 1) * (itemSize as number) - size)\n\n    if (alignment === SMART_ALIGNMENT) {\n      if (\n        scrollOffset >= minOffset - size &&\n        scrollOffset <= maxOffset + size\n      ) {\n        alignment = AUTO_ALIGNMENT\n      } else {\n        alignment = CENTERED_ALIGNMENT\n      }\n    }\n\n    switch (alignment) {\n      case START_ALIGNMENT: {\n        return maxOffset\n      }\n      case END_ALIGNMENT: {\n        return minOffset\n      }\n      case CENTERED_ALIGNMENT: {\n        // \"Centered\" offset is usually the average of the min and max.\n        // But near the edges of the list, this doesn't hold true.\n        const middleOffset = Math.round(minOffset + (maxOffset - minOffset) / 2)\n        if (middleOffset < Math.ceil(size / 2)) {\n          return 0 // near the beginning\n        } else if (middleOffset > lastItemOffset + Math.floor(size / 2)) {\n          return lastItemOffset // near the end\n        } else {\n          return middleOffset\n        }\n      }\n      case AUTO_ALIGNMENT:\n      default: {\n        if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\n          return scrollOffset\n        } else if (scrollOffset < minOffset) {\n          return minOffset\n        } else {\n          return maxOffset\n        }\n      }\n    }\n  },\n\n  getStartIndexForOffset: ({ total, itemSize }, offset) =>\n    Math.max(0, Math.min(total - 1, Math.floor(offset / (itemSize as number)))),\n\n  getStopIndexForStartIndex: (\n    { height, total, itemSize, layout, width }: Props,\n    startIndex: number,\n    scrollOffset: number\n  ) => {\n    const offset = startIndex * (itemSize as number)\n    const size = isHorizontal(layout) ? width : height\n    const numVisibleItems = Math.ceil(\n      ((size as number) + scrollOffset - offset) / (itemSize as number)\n    )\n    return Math.max(\n      0,\n      Math.min(\n        total - 1,\n        // because startIndex is inclusive, so in order to prevent array outbound indexing\n        // we need to - 1 to prevent outbound behavior\n        startIndex + numVisibleItems - 1\n      )\n    )\n  },\n\n  /**\n   * Fixed size list does not need this cache\n   * Using any to bypass it, TODO: Using type inference to fix this.\n   */\n  initCache() {\n    return undefined as any\n  },\n\n  clearCache: true,\n\n  validateProps() {\n    //\n  },\n})\n\nexport default FixedSizeList\n"],"names":["buildList","isHorizontal","isString","SMART_ALIGNMENT","AUTO_ALIGNMENT","CENTERED_ALIGNMENT","START_ALIGNMENT","END_ALIGNMENT"],"mappings":";;;;;;;;;;;MAgBM,gBAAgBA,qBAAU;AAAA,EAC9B,MAAM;AAAA,EACN,eAAe,CAAC,EAAE,YAAY,UAAU,QAAS;AAAA,EAEjD,aAAa,CAAC,EAAE,eAAe;AAAA,EAE/B,uBAAuB,CAAC,EAAE,OAAO,eAAgB,WAAsB;AAAA,EAEvE,WAAW,CACT,EAAE,QAAQ,OAAO,UAAU,QAAQ,SACnC,OACA,WACA,iBACG;AACH,UAAM,OAAQC,mBAAa,UAAU,QAAQ;AAC7C,QAAI,QAAQ,IAAI,aAAa,gBAAgBC,gBAAS,OAAO;AAC3D,uBACE,mBACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQJ,UAAM,iBAAiB,KAAK,IAAI,GAAG,QAAS,WAAsB;AAClE,UAAM,YAAY,KAAK,IAAI,gBAAgB,QAAS;AACpD,UAAM,YAAY,KAAK,IAAI,GAAI,SAAQ,KAAM,WAAsB;AAEnE,QAAI,cAAcC,0BAAiB;AACjC,UACE,gBAAgB,YAAY,QAC5B,gBAAgB,YAAY,MAC5B;AACA,oBAAYC;AAAA,aACP;AACL,oBAAYC;AAAA;AAAA;AAIhB,YAAQ;AAAA,WACDC,0BAAiB;AACpB,eAAO;AAAA;AAAA,WAEJC,wBAAe;AAClB,eAAO;AAAA;AAAA,WAEJF,6BAAoB;AAGvB,cAAM,eAAe,KAAK,MAAM,YAAa,aAAY,aAAa;AACtE,YAAI,eAAe,KAAK,KAAK,OAAO,IAAI;AACtC,iBAAO;AAAA,mBACE,eAAe,iBAAiB,KAAK,MAAM,OAAO,IAAI;AAC/D,iBAAO;AAAA,eACF;AACL,iBAAO;AAAA;AAAA;AAAA,WAGND;AAAA,eACI;AACP,YAAI,gBAAgB,aAAa,gBAAgB,WAAW;AAC1D,iBAAO;AAAA,mBACE,eAAe,WAAW;AACnC,iBAAO;AAAA,eACF;AACL,iBAAO;AAAA;AAAA;AAAA;AAAA;AAAA,EAMf,wBAAwB,CAAC,EAAE,OAAO,YAAY,WAC5C,KAAK,IAAI,GAAG,KAAK,IAAI,QAAQ,GAAG,KAAK,MAAM,SAAU;AAAA,EAEvD,2BAA2B,CACzB,EAAE,QAAQ,OAAO,UAAU,QAAQ,SACnC,YACA,iBACG;AACH,UAAM,SAAS,aAAc;AAC7B,UAAM,OAAOH,mBAAa,UAAU,QAAQ;AAC5C,UAAM,kBAAkB,KAAK,KACzB,QAAkB,eAAe,UAAW;AAEhD,WAAO,KAAK,IACV,GACA,KAAK,IACH,QAAQ,GAGR,aAAa,kBAAkB;AAAA;AAAA,EASrC,YAAY;AACV,WAAO;AAAA;AAAA,EAGT,YAAY;AAAA,EAEZ,gBAAgB;AAAA;AAAA;;;;"}