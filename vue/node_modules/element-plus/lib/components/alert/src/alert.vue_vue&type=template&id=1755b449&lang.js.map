{"version":3,"file":"alert.vue_vue&type=template&id=1755b449&lang.js","sources":["../../../../../../packages/components/alert/src/alert.vue?vue&type=template&id=1755b449&lang.js"],"sourcesContent":["<template>\n  <transition name=\"el-alert-fade\">\n    <div\n      v-show=\"visible\"\n      class=\"el-alert\"\n      :class=\"[typeClass, center ? 'is-center' : '', 'is-' + effect]\"\n      role=\"alert\"\n    >\n      <el-icon\n        v-if=\"showIcon && iconComponent\"\n        class=\"el-alert__icon\"\n        :class=\"isBigIcon\"\n      >\n        <component :is=\"iconComponent\" />\n      </el-icon>\n      <div class=\"el-alert__content\">\n        <span\n          v-if=\"title || $slots.title\"\n          class=\"el-alert__title\"\n          :class=\"[isBoldTitle]\"\n        >\n          <slot name=\"title\">{{ title }}</slot>\n        </span>\n        <p v-if=\"$slots.default || description\" class=\"el-alert__description\">\n          <slot>\n            {{ description }}\n          </slot>\n        </p>\n        <template v-if=\"closable\">\n          <div\n            v-if=\"closeText\"\n            class=\"el-alert__closebtn is-customed\"\n            @click=\"close\"\n          >\n            {{ closeText }}\n          </div>\n          <el-icon v-else class=\"el-alert__closebtn\" @click=\"close\">\n            <close />\n          </el-icon>\n        </template>\n      </div>\n    </div>\n  </transition>\n</template>\n<script lang=\"ts\">\nimport { defineComponent, computed, ref } from 'vue'\nimport { ElIcon } from '@element-plus/components/icon'\nimport { TypeComponents, TypeComponentsMap } from '@element-plus/utils/icon'\nimport { alertProps, alertEmits } from './alert'\n\nexport default defineComponent({\n  name: 'ElAlert',\n\n  components: {\n    ElIcon,\n    ...TypeComponents,\n  },\n\n  props: alertProps,\n  emits: alertEmits,\n\n  setup(props, { emit, slots }) {\n    // state\n    const visible = ref(true)\n\n    // computed\n    const typeClass = computed(() => `el-alert--${props.type}`)\n    const iconComponent = computed(\n      () => TypeComponentsMap[props.type] || TypeComponentsMap['info']\n    )\n    const isBigIcon = computed(() =>\n      props.description || slots.default ? 'is-big' : ''\n    )\n    const isBoldTitle = computed(() =>\n      props.description || slots.default ? 'is-bold' : ''\n    )\n\n    // methods\n    const close = (evt: MouseEvent) => {\n      visible.value = false\n      emit('close', evt)\n    }\n\n    return {\n      visible,\n      typeClass,\n      iconComponent,\n      isBigIcon,\n      isBoldTitle,\n      close,\n    }\n  },\n})\n</script>\n"],"names":["_createBlock","_createElementVNode","_createElementBlock","_renderSlot","_createVNode"],"mappings":";;;;;;qBAeW,OAAM;;;EAQ+B,OAAM;AAAA;;;;0BAtBpDA,kCAAY,MAAK;yBACf;yBAAAC;QAEE,2BAAM,aACG,gBAAW,wCAAmC;QACvD,MAAK;AAAA;QAGG,iBAAY,uCADpBD;;UAEE,2BAAM,kBACE;;+BAER;8BAAAA,4CAAgB;;;;QAElBC,8BAAA;UAEU,cAAS,YAAO,0BADxBC;;YAEE,2BAAM,oBACG;;YAETC,yCAAA;sDAAsB;;;UAEf,YAAO,WAAW,qCAA3BD,4BAAA;YACEC,2CAAA;sDACK;;;UAGS,kCAAhBD;YAEU,mCADRA;;cAEE,OAAM;AAAA,cACL,gDAAO;mCAEL,yCAELF;;cAAgB,OAAM;AAAA,cAAsB,SAAO;;mCACjD;gBAAAI;;;;;;;oBAlCE;;;;;;;;;"}