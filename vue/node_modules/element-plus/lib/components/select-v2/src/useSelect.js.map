{"version":3,"file":"useSelect.js","sources":["../../../../../../packages/components/select-v2/src/useSelect.ts"],"sourcesContent":["import {\n  computed,\n  watch,\n  ref,\n  reactive,\n  nextTick,\n  inject,\n  onMounted,\n  onBeforeMount,\n} from 'vue'\nimport { isArray, isFunction, isObject } from '@vue/shared'\nimport isEqual from 'lodash/isEqual'\nimport lodashDebounce from 'lodash/debounce'\nimport { elFormKey, elFormItemKey } from '@element-plus/tokens'\nimport { useLocaleInject } from '@element-plus/hooks'\nimport { UPDATE_MODEL_EVENT, CHANGE_EVENT } from '@element-plus/utils/constants'\nimport {\n  addResizeListener,\n  removeResizeListener,\n} from '@element-plus/utils/resize-event'\nimport { getValueByPath, useGlobalConfig } from '@element-plus/utils/util'\nimport { Effect } from '@element-plus/components/popper'\n\nimport { ArrowUp } from '@element-plus/icons'\nimport { useAllowCreate } from './useAllowCreate'\n\nimport { flattenOptions } from './util'\n\nimport { useInput } from './useInput'\nimport type { SelectProps } from './defaults'\nimport type { ExtractPropTypes, CSSProperties } from 'vue'\nimport type { ElFormContext, ElFormItemContext } from '@element-plus/tokens'\nimport type { OptionType, Option } from './select.types'\n\nconst DEFAULT_INPUT_PLACEHOLDER = ''\nconst MINIMUM_INPUT_WIDTH = 11\nconst TAG_BASE_WIDTH = {\n  small: 42,\n  mini: 33,\n}\n\nconst useSelect = (props: ExtractPropTypes<typeof SelectProps>, emit) => {\n  // inject\n  const { t } = useLocaleInject()\n  const elForm = inject(elFormKey, {} as ElFormContext)\n  const elFormItem = inject(elFormItemKey, {} as ElFormItemContext)\n  const $ELEMENT = useGlobalConfig()\n\n  const states = reactive({\n    inputValue: DEFAULT_INPUT_PLACEHOLDER,\n    displayInputValue: DEFAULT_INPUT_PLACEHOLDER,\n    calculatedWidth: 0,\n    cachedPlaceholder: '',\n    cachedOptions: [] as Option[],\n    createdOptions: [] as Option[],\n    createdLabel: '',\n    createdSelected: false,\n    currentPlaceholder: '',\n    hoveringIndex: -1,\n    comboBoxHovering: false,\n    isOnComposition: false,\n    isSilentBlur: false,\n    isComposing: false,\n    inputLength: 20,\n    selectWidth: 200,\n    initialInputHeight: 0,\n    previousQuery: null,\n    previousValue: '',\n    query: '',\n    selectedLabel: '',\n    softFocus: false,\n    tagInMultiLine: false,\n  })\n\n  // data refs\n  const selectedIndex = ref(-1)\n  const popperSize = ref(-1)\n\n  // DOM & Component refs\n  const controlRef = ref(null)\n  const inputRef = ref(null) // el-input ref\n  const menuRef = ref(null)\n  const popper = ref(null)\n  const selectRef = ref(null)\n  const selectionRef = ref(null) // tags ref\n  const calculatorRef = ref<HTMLElement>(null)\n\n  // the controller of the expanded popup\n  const expanded = ref(false)\n\n  const selectDisabled = computed(() => props.disabled || elForm.disabled)\n\n  const popupHeight = computed(() => {\n    const totalHeight = filteredOptions.value.length * 34\n    return totalHeight > props.height ? props.height : totalHeight\n  })\n\n  const showClearBtn = computed(() => {\n    const hasValue = props.multiple\n      ? Array.isArray(props.modelValue) && props.modelValue.length > 0\n      : props.modelValue !== undefined &&\n        props.modelValue !== null &&\n        props.modelValue !== ''\n\n    const criteria =\n      props.clearable &&\n      !selectDisabled.value &&\n      states.comboBoxHovering &&\n      hasValue\n    return criteria\n  })\n\n  const iconComponent = computed(() =>\n    props.remote && props.filterable ? '' : ArrowUp\n  )\n\n  const iconReverse = computed(() =>\n    iconComponent.value && expanded.value ? 'is-reverse' : ''\n  )\n\n  const debounce = computed(() => (props.remote ? 300 : 0))\n\n  // filteredOptions includes flatten the data into one dimensional array.\n  const emptyText = computed(() => {\n    const options = filteredOptions.value\n    if (props.loading) {\n      return props.loadingText || t('el.select.loading')\n    } else {\n      if (props.remote && states.inputValue === '' && options.length === 0)\n        return false\n      if (props.filterable && states.inputValue && options.length > 0) {\n        return props.noMatchText || t('el.select.noMatch')\n      }\n      if (options.length === 0) {\n        return props.noDataText || t('el.select.noData')\n      }\n    }\n    return null\n  })\n\n  const filteredOptions = computed(() => {\n    const isValidOption = (o: Option): boolean => {\n      // fill the conditions here.\n      const query = states.inputValue\n      // when query was given, we should test on the label see whether the label contains the given query\n      const containsQueryString = query ? o.label.includes(query) : true\n      return containsQueryString\n    }\n    if (props.loading) {\n      return []\n    }\n    return flattenOptions(\n      (props.options as OptionType[])\n        .concat(states.createdOptions)\n        .map((v) => {\n          if (isArray(v.options)) {\n            const filtered = v.options.filter(isValidOption)\n            if (filtered.length > 0) {\n              return {\n                ...v,\n                options: filtered,\n              }\n            }\n          } else {\n            if (props.remote || isValidOption(v as Option)) {\n              return v\n            }\n          }\n          return null\n        })\n        .filter((v) => v !== null)\n    )\n  })\n\n  const optionsAllDisabled = computed(() =>\n    filteredOptions.value.every((option) => option.disabled)\n  )\n\n  const selectSize = computed(\n    () => props.size || elFormItem.size || $ELEMENT.size\n  )\n\n  const collapseTagSize = computed(() =>\n    ['small', 'mini'].indexOf(selectSize.value) > -1 ? 'mini' : 'small'\n  )\n\n  const tagMaxWidth = computed(() => {\n    const select = selectionRef.value\n    const size = collapseTagSize.value\n    const paddingLeft = select\n      ? parseInt(getComputedStyle(select).paddingLeft)\n      : 0\n    const paddingRight = select\n      ? parseInt(getComputedStyle(select).paddingRight)\n      : 0\n    return (\n      states.selectWidth - paddingRight - paddingLeft - TAG_BASE_WIDTH[size]\n    )\n  })\n\n  const calculatePopperSize = () => {\n    popperSize.value = selectRef.value?.getBoundingClientRect?.()?.width || 200\n  }\n\n  const inputWrapperStyle = computed(() => {\n    return {\n      width: `${\n        states.calculatedWidth === 0\n          ? MINIMUM_INPUT_WIDTH\n          : Math.ceil(states.calculatedWidth) + MINIMUM_INPUT_WIDTH\n      }px`,\n    } as CSSProperties\n  })\n\n  const shouldShowPlaceholder = computed(() => {\n    if (isArray(props.modelValue)) {\n      return props.modelValue.length === 0 && !states.displayInputValue\n    }\n\n    // when it's not multiple mode, we only determine this flag based on filterable and expanded\n    // when filterable flag is true, which means we have input box on the screen\n    return props.filterable ? states.displayInputValue.length === 0 : true\n  })\n\n  const currentPlaceholder = computed(() => {\n    const _placeholder = props.placeholder || t('el.select.placeholder')\n    return props.multiple ? _placeholder : states.selectedLabel || _placeholder\n  })\n\n  // this obtains the actual popper DOM element.\n  const popperRef = computed(() => popper.value?.popperRef)\n\n  // the index with current value in options\n  const indexRef = computed<number>(() => {\n    if (props.multiple) {\n      const len = (props.modelValue as []).length\n      if ((props.modelValue as Array<any>).length > 0) {\n        return filteredOptions.value.findIndex(\n          (o) => o.value === props.modelValue[len - 1]\n        )\n      }\n    } else {\n      if (props.modelValue) {\n        return filteredOptions.value.findIndex(\n          (o) => o.value === props.modelValue\n        )\n      }\n    }\n    return -1\n  })\n\n  const dropdownMenuVisible = computed(() => {\n    return expanded.value && emptyText.value !== false\n  })\n\n  // hooks\n  const {\n    createNewOption,\n    removeNewOption,\n    selectNewOption,\n    clearAllNewOption,\n  } = useAllowCreate(props, states)\n  const {\n    handleCompositionStart,\n    handleCompositionUpdate,\n    handleCompositionEnd,\n  } = useInput((e) => onInput(e))\n\n  // methods\n  const focusAndUpdatePopup = () => {\n    inputRef.value.focus?.()\n    popper.value.update?.()\n  }\n\n  const toggleMenu = () => {\n    if (props.automaticDropdown) return\n    if (!selectDisabled.value) {\n      if (states.isComposing) states.softFocus = true\n      return nextTick(() => {\n        expanded.value = !expanded.value\n        inputRef.value?.focus?.()\n      })\n    }\n  }\n\n  const onInputChange = () => {\n    if (props.filterable && states.inputValue !== states.selectedLabel) {\n      states.query = states.selectedLabel\n    }\n    handleQueryChange(states.inputValue)\n    return nextTick(() => {\n      createNewOption(states.inputValue)\n    })\n  }\n\n  const debouncedOnInputChange = lodashDebounce(onInputChange, debounce.value)\n\n  const handleQueryChange = (val: string) => {\n    if (states.previousQuery === val) {\n      return\n    }\n    states.previousQuery = val\n    if (props.filterable && isFunction(props.filterMethod)) {\n      props.filterMethod(val)\n    } else if (\n      props.filterable &&\n      props.remote &&\n      isFunction(props.remoteMethod)\n    ) {\n      props.remoteMethod(val)\n    }\n  }\n\n  const emitChange = (val: any | any[]) => {\n    if (!isEqual(props.modelValue, val)) {\n      emit(CHANGE_EVENT, val)\n    }\n  }\n\n  const update = (val: any) => {\n    emit(UPDATE_MODEL_EVENT, val)\n    emitChange(val)\n    states.previousValue = val.toString()\n  }\n\n  const getValueIndex = (arr = [], value: unknown) => {\n    if (!isObject(value)) {\n      return arr.indexOf(value)\n    }\n    const valueKey = props.valueKey\n    let index = -1\n    arr.some((item, i) => {\n      if (getValueByPath(item, valueKey) === getValueByPath(value, valueKey)) {\n        index = i\n        return true\n      }\n      return false\n    })\n    return index\n  }\n\n  const getValueKey = (item: unknown) => {\n    return isObject(item) ? getValueByPath(item, props.valueKey) : item\n  }\n\n  // if the selected item is item then we get label via indexing\n  // otherwise it should be string we simply return the item itself.\n  const getLabel = (item: unknown) => {\n    return isObject(item) ? item.label : item\n  }\n\n  const resetInputHeight = () => {\n    if (props.collapseTags && !props.filterable) {\n      return\n    }\n    return nextTick(() => {\n      if (!inputRef.value) return\n      const selection = selectionRef.value\n\n      selectRef.value.height = selection.offsetHeight\n      if (expanded.value && emptyText.value !== false) {\n        popper.value?.update?.()\n      }\n    })\n  }\n\n  const handleResize = () => {\n    resetInputWidth()\n    calculatePopperSize()\n    popper.value?.update?.()\n    if (props.multiple) {\n      return resetInputHeight()\n    }\n  }\n\n  const resetInputWidth = () => {\n    const select = selectionRef.value\n    if (select) {\n      states.selectWidth = select.getBoundingClientRect().width\n    }\n  }\n\n  const onSelect = (option: Option, idx: number, byClick = true) => {\n    if (props.multiple) {\n      let selectedOptions = (props.modelValue as any[]).slice()\n\n      const index = getValueIndex(selectedOptions, getValueKey(option))\n      if (index > -1) {\n        selectedOptions = [\n          ...selectedOptions.slice(0, index),\n          ...selectedOptions.slice(index + 1),\n        ]\n        states.cachedOptions.splice(index, 1)\n        removeNewOption(option)\n      } else if (\n        props.multipleLimit <= 0 ||\n        selectedOptions.length < props.multipleLimit\n      ) {\n        selectedOptions = [...selectedOptions, getValueKey(option)]\n        states.cachedOptions.push(option)\n        selectNewOption(option)\n        updateHoveringIndex(idx)\n      }\n      update(selectedOptions)\n      if (option.created) {\n        states.query = ''\n        handleQueryChange('')\n        states.inputLength = 20\n      }\n      if (props.filterable) {\n        inputRef.value.focus?.()\n        onUpdateInputValue('')\n      }\n      if (props.filterable) {\n        states.calculatedWidth =\n          calculatorRef.value.getBoundingClientRect().width\n      }\n      resetInputHeight()\n      setSoftFocus()\n    } else {\n      selectedIndex.value = idx\n      states.selectedLabel = option.label\n      update(getValueKey(option))\n      expanded.value = false\n      states.isComposing = false\n      states.isSilentBlur = byClick\n      selectNewOption(option)\n      if (!option.created) {\n        clearAllNewOption()\n      }\n      updateHoveringIndex(idx)\n    }\n  }\n\n  const deleteTag = (event: MouseEvent, tag: Option) => {\n    const index = (props.modelValue as Array<any>).indexOf(tag.value)\n\n    if (index > -1 && !selectDisabled.value) {\n      const value = [\n        ...(props.modelValue as Array<unknown>).slice(0, index),\n        ...(props.modelValue as Array<unknown>).slice(index + 1),\n      ]\n      states.cachedOptions.splice(index, 1)\n      update(value)\n      emit('remove-tag', tag.value)\n      states.softFocus = true\n      removeNewOption(tag)\n      return nextTick(focusAndUpdatePopup)\n    }\n    event.stopPropagation()\n  }\n\n  const handleFocus = (event: FocusEvent) => {\n    const focused = states.isComposing\n    states.isComposing = true\n    if (!states.softFocus) {\n      // If already in the focus state, shouldn't trigger event\n      if (!focused) emit('focus', event)\n    } else {\n      states.softFocus = false\n    }\n  }\n\n  const handleBlur = () => {\n    states.softFocus = false\n\n    // reset input value when blurred\n    // https://github.com/ElemeFE/element/pull/10822\n    return nextTick(() => {\n      inputRef.value?.blur?.()\n      if (calculatorRef.value) {\n        states.calculatedWidth =\n          calculatorRef.value.getBoundingClientRect().width\n      }\n      if (states.isSilentBlur) {\n        states.isSilentBlur = false\n      } else {\n        if (states.isComposing) {\n          emit('blur')\n        }\n      }\n      states.isComposing = false\n    })\n  }\n\n  // keyboard handlers\n  const handleEsc = () => {\n    if (states.displayInputValue.length > 0) {\n      onUpdateInputValue('')\n    } else {\n      expanded.value = false\n    }\n  }\n\n  const handleDel = (e: KeyboardEvent) => {\n    if (states.displayInputValue.length === 0) {\n      e.preventDefault()\n      const selected = (props.modelValue as Array<any>).slice()\n      selected.pop()\n      removeNewOption(states.cachedOptions.pop())\n      update(selected)\n    }\n  }\n\n  const handleClear = () => {\n    let emptyValue: string | any[]\n    if (isArray(props.modelValue)) {\n      emptyValue = []\n    } else {\n      emptyValue = ''\n    }\n\n    states.softFocus = true\n    if (props.multiple) {\n      states.cachedOptions = []\n    } else {\n      states.selectedLabel = ''\n    }\n    expanded.value = false\n    update(emptyValue)\n    emit('clear')\n    clearAllNewOption()\n    return nextTick(focusAndUpdatePopup)\n  }\n\n  const onUpdateInputValue = (val: string) => {\n    states.displayInputValue = val\n    states.inputValue = val\n  }\n\n  const onKeyboardNavigate = (\n    direction: 'forward' | 'backward',\n    hoveringIndex: number = undefined\n  ) => {\n    const options = filteredOptions.value\n    if (\n      !['forward', 'backward'].includes(direction) ||\n      selectDisabled.value ||\n      options.length <= 0 ||\n      optionsAllDisabled.value\n    ) {\n      return\n    }\n    if (!expanded.value) {\n      return toggleMenu()\n    }\n    if (hoveringIndex === undefined) {\n      hoveringIndex = states.hoveringIndex\n    }\n    let newIndex = -1\n    if (direction === 'forward') {\n      newIndex = hoveringIndex + 1\n      if (newIndex >= options.length) {\n        // return to the first option\n        newIndex = 0\n      }\n    } else if (direction === 'backward') {\n      newIndex = hoveringIndex - 1\n      if (newIndex < 0) {\n        // navigate to the last one\n        newIndex = options.length - 1\n      }\n    }\n    const option = options[newIndex]\n    if (option.disabled || option.type === 'Group') {\n      // prevent dispatching multiple nextTick callbacks.\n      return onKeyboardNavigate(direction, newIndex)\n    } else {\n      updateHoveringIndex(newIndex)\n      scrollToItem(newIndex)\n    }\n  }\n\n  const onKeyboardSelect = () => {\n    if (!expanded.value) {\n      return toggleMenu()\n    } else if (~states.hoveringIndex) {\n      onSelect(\n        filteredOptions.value[states.hoveringIndex],\n        states.hoveringIndex,\n        false\n      )\n    }\n  }\n\n  const updateHoveringIndex = (idx: number) => {\n    states.hoveringIndex = idx\n  }\n\n  const resetHoveringIndex = () => {\n    states.hoveringIndex = -1\n  }\n\n  const setSoftFocus = () => {\n    const _input = inputRef.value\n    if (_input) {\n      _input.focus?.()\n    }\n  }\n\n  const onInput = (event) => {\n    const value = event.target.value\n    onUpdateInputValue(value)\n    if (states.displayInputValue.length > 0 && !expanded.value) {\n      expanded.value = true\n    }\n\n    states.calculatedWidth = calculatorRef.value.getBoundingClientRect().width\n    if (props.multiple) {\n      resetInputHeight()\n    }\n    if (props.remote) {\n      debouncedOnInputChange()\n    } else {\n      return onInputChange()\n    }\n  }\n\n  const handleClickOutside = () => {\n    expanded.value = false\n    return handleBlur()\n  }\n\n  const handleMenuEnter = () => {\n    states.inputValue = states.displayInputValue\n    return nextTick(() => {\n      if (~indexRef.value) {\n        updateHoveringIndex(indexRef.value)\n        scrollToItem(states.hoveringIndex)\n      }\n    })\n  }\n\n  const scrollToItem = (index: number) => {\n    menuRef.value.scrollToItem(index)\n  }\n\n  const initStates = () => {\n    resetHoveringIndex()\n    if (props.multiple) {\n      if ((props.modelValue as Array<any>).length > 0) {\n        let initHovering = false\n        states.cachedOptions.length = 0\n        ;(props.modelValue as Array<any>).map((selected) => {\n          const itemIndex = filteredOptions.value.findIndex(\n            (option) => getValueKey(option) === selected\n          )\n          if (~itemIndex) {\n            states.cachedOptions.push(\n              filteredOptions.value[itemIndex] as Option\n            )\n            if (!initHovering) {\n              updateHoveringIndex(itemIndex)\n            }\n            initHovering = true\n          }\n        })\n      } else {\n        states.cachedOptions = []\n      }\n    } else {\n      if (props.modelValue) {\n        const options = filteredOptions.value\n        const selectedItemIndex = options.findIndex(\n          (option) => getValueKey(option) === props.modelValue\n        )\n        if (~selectedItemIndex) {\n          states.selectedLabel = options[selectedItemIndex].label\n          updateHoveringIndex(selectedItemIndex)\n        } else {\n          states.selectedLabel = `${props.modelValue}`\n        }\n      } else {\n        states.selectedLabel = ''\n      }\n    }\n    calculatePopperSize()\n  }\n\n  // in order to track these individually, we need to turn them into refs instead of watching the entire\n  // reactive object which could cause perf penalty when unnecessary field gets changed the watch method will\n  // be invoked.\n\n  watch(expanded, (val) => {\n    emit('visible-change', val)\n    if (val) {\n      popper.value.update?.()\n      // the purpose of this function is to differ the blur event trigger mechanism\n    } else {\n      states.displayInputValue = ''\n      createNewOption('')\n    }\n  })\n\n  watch(\n    () => props.modelValue,\n    (val) => {\n      if (!val || val.toString() !== states.previousValue) {\n        initStates()\n      }\n    },\n    {\n      deep: true,\n    }\n  )\n\n  watch(\n    () => props.options,\n    () => {\n      const input = inputRef.value\n      // filter or remote-search scenarios are not initialized\n      if (!input || (input && document.activeElement !== input)) {\n        initStates()\n      }\n    },\n    {\n      deep: true,\n    }\n  )\n\n  // fix the problem that scrollTop is not reset in filterable mode\n  watch(filteredOptions, () => {\n    return nextTick(menuRef.value.resetScrollTop)\n  })\n\n  onMounted(() => {\n    initStates()\n    addResizeListener(selectRef.value, handleResize)\n  })\n\n  onBeforeMount(() => {\n    removeResizeListener(selectRef.value, handleResize)\n  })\n\n  return {\n    // data exports\n    collapseTagSize,\n    currentPlaceholder,\n    expanded,\n    emptyText,\n    popupHeight,\n    debounce,\n    filteredOptions,\n    iconComponent,\n    iconReverse,\n    inputWrapperStyle,\n    popperSize,\n    dropdownMenuVisible,\n    // readonly,\n    shouldShowPlaceholder,\n    selectDisabled,\n    selectSize,\n    showClearBtn,\n    states,\n    tagMaxWidth,\n\n    // refs items exports\n    calculatorRef,\n    controlRef,\n    inputRef,\n    menuRef,\n    popper,\n    selectRef,\n    selectionRef,\n\n    popperRef,\n\n    Effect,\n\n    // methods exports\n    debouncedOnInputChange,\n    deleteTag,\n    getLabel,\n    getValueKey,\n    handleBlur,\n    handleClear,\n    handleClickOutside,\n    handleDel,\n    handleEsc,\n    handleFocus,\n    handleMenuEnter,\n    handleResize,\n    toggleMenu,\n    scrollTo: scrollToItem,\n    onInput,\n    onKeyboardNavigate,\n    onKeyboardSelect,\n    onSelect,\n    onHover: updateHoveringIndex,\n    onUpdateInputValue,\n    handleCompositionStart,\n    handleCompositionEnd,\n    handleCompositionUpdate,\n  }\n}\n\nexport default useSelect\n"],"names":["useLocaleInject","inject","elFormKey","elFormItemKey","useGlobalConfig","reactive","ref","computed","ArrowUp","flattenOptions","isArray","useAllowCreate","useInput","nextTick","lodashDebounce","isFunction","isEqual","CHANGE_EVENT","UPDATE_MODEL_EVENT","isObject","getValueByPath","Effect"],"mappings":"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"}