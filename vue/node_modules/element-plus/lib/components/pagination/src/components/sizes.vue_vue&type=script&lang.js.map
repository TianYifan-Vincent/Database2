{"version":3,"file":"sizes.vue_vue&type=script&lang.js","sources":["../../../../../../../packages/components/pagination/src/components/sizes.vue"],"sourcesContent":["<template>\n  <span class=\"el-pagination__sizes\">\n    <el-select\n      :model-value=\"innerPageSize\"\n      :disabled=\"disabled\"\n      :popper-class=\"popperClass\"\n      size=\"mini\"\n      @change=\"handleChange\"\n    >\n      <el-option\n        v-for=\"item in innerPagesizes\"\n        :key=\"item\"\n        :value=\"item\"\n        :label=\"item + t('el.pagination.pagesize')\"\n      />\n    </el-select>\n  </span>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, watch, computed, ref } from 'vue'\nimport isEqual from 'lodash/isEqual'\nimport { ElSelect, ElOption } from '@element-plus/components/select'\nimport { useLocaleInject } from '@element-plus/hooks'\nimport { buildProps, definePropType, mutable } from '@element-plus/utils/props'\nimport { usePagination } from '../usePagination'\n\nimport type { Nullable } from '@element-plus/utils/types'\n\nconst paginationSizesProps = buildProps({\n  pageSize: {\n    type: Number,\n    required: true,\n  },\n  pageSizes: {\n    type: definePropType<number[]>(Array),\n    default: () => mutable([10, 20, 30, 40, 50, 100] as const),\n  },\n  popperClass: {\n    type: String,\n    default: '',\n  },\n  disabled: Boolean,\n} as const)\n\nexport default defineComponent({\n  name: 'ElPaginationSizes',\n\n  components: {\n    ElSelect,\n    ElOption,\n  },\n\n  props: paginationSizesProps,\n  emits: ['page-size-change'],\n\n  setup(props, { emit }) {\n    const { t } = useLocaleInject()\n    const pagination = usePagination()\n    const innerPageSize = ref<Nullable<number>>(props.pageSize)\n\n    watch(\n      () => props.pageSizes,\n      (newVal, oldVal) => {\n        if (isEqual(newVal, oldVal)) return\n        if (Array.isArray(newVal)) {\n          const pageSize =\n            newVal.indexOf(props.pageSize) > -1\n              ? props.pageSize\n              : props.pageSizes[0]\n          emit('page-size-change', pageSize)\n        }\n      }\n    )\n\n    watch(\n      () => props.pageSize,\n      (newVal) => {\n        innerPageSize.value = newVal\n      }\n    )\n\n    const innerPagesizes = computed(() => props.pageSizes)\n\n    function handleChange(val: number) {\n      if (val !== innerPageSize.value) {\n        innerPageSize.value = val\n        pagination.handleSizeChange?.(Number(val))\n      }\n    }\n\n    return {\n      innerPagesizes,\n      innerPageSize,\n\n      t,\n      handleChange,\n    }\n  },\n})\n</script>\n"],"names":["buildProps","definePropType","mutable","defineComponent","ElSelect","ElOption","useLocaleInject","usePagination","ref","isEqual","computed"],"mappings":";;;;;;;;;;;;;;;;AA6BA,MAAM,uBAAuBA,iBAAW;AAAA,EACtC,UAAU;AAAA,IACR,MAAM;AAAA,IACN,UAAU;AAAA;AAAA,EAEZ,WAAW;AAAA,IACT,MAAMC,qBAAyB;AAAA,IAC/B,SAAS,MAAMC,cAAQ,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI;AAAA;AAAA,EAE9C,aAAa;AAAA,IACX,MAAM;AAAA,IACN,SAAS;AAAA;AAAA,EAEX,UAAU;AAAA;AAGZ,aAAeC,oBAAgB;AAAA,EAC7B,MAAM;AAAA,EAEN,YAAY;AAAA,cACVC;AAAA,cACAC;AAAA;AAAA,EAGF,OAAO;AAAA,EACP,OAAO,CAAC;AAAA,EAER,MAAM,OAAO,EAAE,QAAQ;AACrB,UAAM,EAAE,MAAMC;AACd,UAAM,aAAaC;AACnB,UAAM,gBAAgBC,QAAsB,MAAM;AAElD,cACE,MAAM,MAAM,WACZ,CAAC,QAAQ,WAAW;AAClB,UAAIC,4BAAQ,QAAQ;AAAS;AAC7B,UAAI,MAAM,QAAQ,SAAS;AACzB,cAAM,WACJ,OAAO,QAAQ,MAAM,YAAY,KAC7B,MAAM,WACN,MAAM,UAAU;AACtB,aAAK,oBAAoB;AAAA;AAAA;AAK/B,cACE,MAAM,MAAM,UACZ,CAAC,WAAW;AACV,oBAAc,QAAQ;AAAA;AAI1B,UAAM,iBAAiBC,aAAS,MAAM,MAAM;AAE5C,0BAAsB,KAAa;;AACjC,UAAI,QAAQ,cAAc,OAAO;AAC/B,sBAAc,QAAQ;AACtB,yBAAW,qBAAX,oCAA8B,OAAO;AAAA;AAAA;AAIzC,WAAO;AAAA,MACL;AAAA,MACA;AAAA,MAEA;AAAA,MACA;AAAA;AAAA;AAAA;;;;"}