{"version":3,"file":"index.vue_vue&type=script&lang.js","sources":["../../../../../../packages/components/switch/src/index.vue"],"sourcesContent":["<template>\n  <div\n    class=\"el-switch\"\n    :class=\"{ 'is-disabled': switchDisabled, 'is-checked': checked }\"\n    role=\"switch\"\n    :aria-checked=\"checked\"\n    :aria-disabled=\"switchDisabled\"\n    @click.prevent=\"switchValue\"\n  >\n    <input\n      :id=\"id\"\n      ref=\"input\"\n      class=\"el-switch__input\"\n      type=\"checkbox\"\n      :name=\"name\"\n      :true-value=\"activeValue\"\n      :false-value=\"inactiveValue\"\n      :disabled=\"switchDisabled\"\n      @change=\"handleChange\"\n      @keydown.enter=\"switchValue\"\n    />\n    <span\n      v-if=\"!inlinePrompt && (inactiveIcon || inactiveText)\"\n      :class=\"[\n        'el-switch__label',\n        'el-switch__label--left',\n        !checked ? 'is-active' : '',\n      ]\"\n    >\n      <el-icon v-if=\"inactiveIcon\"><component :is=\"inactiveIcon\" /></el-icon>\n      <span v-if=\"!inactiveIcon && inactiveText\" :aria-hidden=\"checked\">{{\n        inactiveText\n      }}</span>\n    </span>\n    <span\n      ref=\"core\"\n      class=\"el-switch__core\"\n      :style=\"{ width: (width || 40) + 'px' }\"\n    >\n      <div v-if=\"inlinePrompt\" class=\"el-switch__inner\">\n        <template v-if=\"activeIcon || inactiveIcon\">\n          <el-icon\n            v-if=\"activeIcon\"\n            class=\"is-icon\"\n            :class=\"checked ? 'is-show' : 'is-hide'\"\n          >\n            <component :is=\"activeIcon\" />\n          </el-icon>\n          <el-icon\n            v-if=\"inactiveIcon\"\n            class=\"is-icon\"\n            :class=\"!checked ? 'is-show' : 'is-hide'\"\n          >\n            <component :is=\"inactiveIcon\" />\n          </el-icon>\n        </template>\n        <template v-else-if=\"activeText || inactiveIcon\">\n          <span\n            v-if=\"activeText\"\n            class=\"is-text\"\n            :class=\"checked ? 'is-show' : 'is-hide'\"\n            :aria-hidden=\"!checked\"\n          >\n            {{ activeText.substr(0, 1) }}\n          </span>\n          <span\n            v-if=\"inactiveText\"\n            class=\"is-text\"\n            :class=\"!checked ? 'is-show' : 'is-hide'\"\n            :aria-hidden=\"checked\"\n          >\n            {{ inactiveText.substr(0, 1) }}\n          </span>\n        </template>\n      </div>\n      <div class=\"el-switch__action\">\n        <el-icon v-if=\"loading\" class=\"is-loading\"><loading /></el-icon>\n      </div>\n    </span>\n    <span\n      v-if=\"!inlinePrompt && (activeIcon || activeText)\"\n      :class=\"[\n        'el-switch__label',\n        'el-switch__label--right',\n        checked ? 'is-active' : '',\n      ]\"\n    >\n      <el-icon v-if=\"activeIcon\"><component :is=\"activeIcon\" /></el-icon>\n      <span v-if=\"!activeIcon && activeText\" :aria-hidden=\"!checked\">{{\n        activeText\n      }}</span>\n    </span>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport {\n  defineComponent,\n  computed,\n  onMounted,\n  ref,\n  inject,\n  nextTick,\n  watch,\n} from 'vue'\nimport { isPromise } from '@vue/shared'\nimport { elFormKey, elFormItemKey } from '@element-plus/tokens'\nimport { isBool } from '@element-plus/utils/util'\nimport { throwError, debugWarn } from '@element-plus/utils/error'\nimport ElIcon from '@element-plus/components/icon'\nimport { Loading } from '@element-plus/icons'\n\nimport type { PropType, Component } from 'vue'\nimport type { ElFormContext, ElFormItemContext } from '@element-plus/tokens'\n\ntype ValueType = boolean | string | number\n\ninterface ISwitchProps {\n  modelValue: ValueType\n  value: ValueType\n  disabled: boolean\n  width: number\n  activeIcon: string | Component\n  inactiveIcon: string | Component\n  activeText: string\n  inactiveText: string\n  activeColor: string\n  inactiveColor: string\n  borderColor: string\n  activeValue: ValueType\n  inactiveValue: ValueType\n  name: string\n  validateEvent: boolean\n  id: string\n  loading: boolean\n  beforeChange?: () => Promise<boolean> | boolean\n}\n\nexport default defineComponent({\n  name: 'ElSwitch',\n  components: { ElIcon, Loading },\n  props: {\n    modelValue: {\n      type: [Boolean, String, Number],\n      default: false,\n    },\n    value: {\n      type: [Boolean, String, Number],\n      default: false,\n    },\n    disabled: {\n      type: Boolean,\n      default: false,\n    },\n    width: {\n      type: Number,\n      default: 40,\n    },\n    inlinePrompt: {\n      type: Boolean,\n      default: false,\n    },\n    activeIcon: {\n      type: [String, Object] as PropType<string | Component>,\n      default: '',\n    },\n    inactiveIcon: {\n      type: [String, Object] as PropType<string | Component>,\n      default: '',\n    },\n    activeText: {\n      type: String,\n      default: '',\n    },\n    inactiveText: {\n      type: String,\n      default: '',\n    },\n    activeColor: {\n      type: String,\n      default: '',\n    },\n    inactiveColor: {\n      type: String,\n      default: '',\n    },\n    borderColor: {\n      type: String,\n      default: '',\n    },\n    activeValue: {\n      type: [Boolean, String, Number],\n      default: true,\n    },\n    inactiveValue: {\n      type: [Boolean, String, Number],\n      default: false,\n    },\n    name: {\n      type: String,\n      default: '',\n    },\n    validateEvent: {\n      type: Boolean,\n      default: true,\n    },\n    id: String,\n    loading: {\n      type: Boolean,\n      default: false,\n    },\n    beforeChange: Function as PropType<() => Promise<boolean> | boolean>,\n  },\n  emits: ['update:modelValue', 'change', 'input'],\n  setup(props: ISwitchProps, ctx) {\n    const elForm = inject(elFormKey, {} as ElFormContext)\n    const elFormItem = inject(elFormItemKey, {} as ElFormItemContext)\n\n    const isModelValue = ref(props.modelValue !== false)\n    const input = ref(null)\n    const core = ref(null)\n\n    const scope = 'ElSwitch'\n\n    watch(\n      () => props.modelValue,\n      () => {\n        isModelValue.value = true\n      }\n    )\n\n    watch(\n      () => props.value,\n      () => {\n        isModelValue.value = false\n      }\n    )\n\n    const actualValue = computed((): ValueType => {\n      return isModelValue.value ? props.modelValue : props.value\n    })\n\n    const checked = computed((): boolean => {\n      return actualValue.value === props.activeValue\n    })\n\n    if (!~[props.activeValue, props.inactiveValue].indexOf(actualValue.value)) {\n      ctx.emit('update:modelValue', props.inactiveValue)\n      ctx.emit('change', props.inactiveValue)\n      ctx.emit('input', props.inactiveValue)\n    }\n\n    watch(checked, () => {\n      input.value.checked = checked.value\n\n      if (props.activeColor || props.inactiveColor) {\n        setBackgroundColor()\n      }\n\n      if (props.validateEvent) {\n        elFormItem.validate?.('change')\n      }\n    })\n\n    const switchDisabled = computed((): boolean => {\n      return props.disabled || props.loading || (elForm || {}).disabled\n    })\n\n    const handleChange = (): void => {\n      const val = checked.value ? props.inactiveValue : props.activeValue\n      ctx.emit('update:modelValue', val)\n      ctx.emit('change', val)\n      ctx.emit('input', val)\n      nextTick(() => {\n        input.value.checked = checked.value\n      })\n    }\n\n    const switchValue = (): void => {\n      if (switchDisabled.value) return\n\n      const { beforeChange } = props\n      if (!beforeChange) {\n        handleChange()\n        return\n      }\n\n      const shouldChange = beforeChange()\n\n      const isExpectType = [isPromise(shouldChange), isBool(shouldChange)].some(\n        (i) => i\n      )\n      if (!isExpectType) {\n        throwError(\n          scope,\n          'beforeChange must return type `Promise<boolean>` or `boolean`'\n        )\n      }\n\n      if (isPromise(shouldChange)) {\n        shouldChange\n          .then((result) => {\n            if (result) {\n              handleChange()\n            }\n          })\n          .catch((e) => {\n            debugWarn(scope, `some error occurred: ${e}`)\n          })\n      } else if (shouldChange) {\n        handleChange()\n      }\n    }\n\n    const setBackgroundColor = (): void => {\n      const newColor = checked.value ? props.activeColor : props.inactiveColor\n      const coreEl = core.value\n      if (props.borderColor) coreEl.style.borderColor = props.borderColor\n      else if (!props.borderColor) coreEl.style.borderColor = newColor\n      coreEl.style.backgroundColor = newColor\n      coreEl.children[0].style.color = newColor\n    }\n\n    const focus = (): void => {\n      input.value?.focus?.()\n    }\n\n    onMounted(() => {\n      if (props.activeColor || props.inactiveColor || props.borderColor) {\n        setBackgroundColor()\n      }\n\n      input.value.checked = checked.value\n    })\n\n    return {\n      input,\n      core,\n      switchDisabled,\n      checked,\n      handleChange,\n      switchValue,\n      focus,\n    }\n  },\n})\n</script>\n"],"names":["defineComponent","ElIcon","Loading","inject","elFormKey","elFormItemKey","ref","computed","isPromise","isBool"],"mappings":"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"}