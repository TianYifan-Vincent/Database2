{"version":3,"file":"upload-dragger.vue_vue&type=script&lang.js","sources":["../../../../../../packages/components/upload/src/upload-dragger.vue"],"sourcesContent":["<template>\n  <div\n    :class=\"{\n      'el-upload-dragger': true,\n      'is-dragover': dragover,\n    }\"\n    @drop.prevent=\"onDrop\"\n    @dragover.prevent=\"onDragover\"\n    @dragleave.prevent=\"dragover = false\"\n  >\n    <slot></slot>\n  </div>\n</template>\n<script lang=\"ts\">\nimport { defineComponent, ref, inject } from 'vue'\n\nimport type { ElUpload } from './upload.type'\n\nexport default defineComponent({\n  name: 'ElUploadDrag',\n  props: {\n    disabled: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  emits: ['file'],\n  setup(props, { emit }) {\n    const uploader = inject('uploader', {} as ElUpload)\n    const dragover = ref(false)\n\n    function onDrop(e: DragEvent) {\n      if (props.disabled || !uploader) return\n      const accept = uploader.accept\n      dragover.value = false\n      if (!accept) {\n        emit('file', e.dataTransfer.files)\n        return\n      }\n      emit(\n        'file',\n        Array.from(e.dataTransfer.files).filter((file) => {\n          const { type, name } = file\n          const extension =\n            name.indexOf('.') > -1 ? `.${name.split('.').pop()}` : ''\n          const baseType = type.replace(/\\/.*$/, '')\n          return accept\n            .split(',')\n            .map((type) => type.trim())\n            .filter((type) => type)\n            .some((acceptedType) => {\n              if (acceptedType.startsWith('.')) {\n                return extension === acceptedType\n              }\n              if (/\\/\\*$/.test(acceptedType)) {\n                return baseType === acceptedType.replace(/\\/\\*$/, '')\n              }\n              if (/^[^/]+\\/[^/]+$/.test(acceptedType)) {\n                return type === acceptedType\n              }\n              return false\n            })\n        })\n      )\n    }\n\n    function onDragover() {\n      if (!props.disabled) dragover.value = true\n    }\n\n    return {\n      dragover,\n      onDrop,\n      onDragover,\n    }\n  },\n})\n</script>\n"],"names":["defineComponent","inject","ref"],"mappings":";;;;;;AAkBA,aAAeA,oBAAgB;AAAA,EAC7B,MAAM;AAAA,EACN,OAAO;AAAA,IACL,UAAU;AAAA,MACR,MAAM;AAAA,MACN,SAAS;AAAA;AAAA;AAAA,EAGb,OAAO,CAAC;AAAA,EACR,MAAM,OAAO,EAAE,QAAQ;AACrB,UAAM,WAAWC,WAAO,YAAY;AACpC,UAAM,WAAWC,QAAI;AAErB,oBAAgB,GAAc;AAC5B,UAAI,MAAM,YAAY,CAAC;AAAU;AACjC,YAAM,SAAS,SAAS;AACxB,eAAS,QAAQ;AACjB,UAAI,CAAC,QAAQ;AACX,aAAK,QAAQ,EAAE,aAAa;AAC5B;AAAA;AAEF,WACE,QACA,MAAM,KAAK,EAAE,aAAa,OAAO,OAAO,CAAC,SAAS;AAChD,cAAM,EAAE,MAAM,SAAS;AACvB,cAAM,YACJ,KAAK,QAAQ,OAAO,KAAK,IAAI,KAAK,MAAM,KAAK,UAAU;AACzD,cAAM,WAAW,KAAK,QAAQ,SAAS;AACvC,eAAO,OACJ,MAAM,KACN,IAAI,CAAC,UAAS,MAAK,QACnB,OAAO,CAAC,UAAS,OACjB,KAAK,CAAC,iBAAiB;AACtB,cAAI,aAAa,WAAW,MAAM;AAChC,mBAAO,cAAc;AAAA;AAEvB,cAAI,QAAQ,KAAK,eAAe;AAC9B,mBAAO,aAAa,aAAa,QAAQ,SAAS;AAAA;AAEpD,cAAI,iBAAiB,KAAK,eAAe;AACvC,mBAAO,SAAS;AAAA;AAElB,iBAAO;AAAA;AAAA;AAAA;AAMjB,0BAAsB;AACpB,UAAI,CAAC,MAAM;AAAU,iBAAS,QAAQ;AAAA;AAGxC,WAAO;AAAA,MACL;AAAA,MACA;AAAA,MACA;AAAA;AAAA;AAAA;;;;"}