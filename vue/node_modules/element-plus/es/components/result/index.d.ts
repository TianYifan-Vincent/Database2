export declare const ElResult: import("../../utils/types").SFCWithInstall<import("vue").DefineComponent<{
    readonly title: import("../../utils/props").BuildPropReturn<StringConstructor, "", unknown, unknown, unknown>;
    readonly subTitle: import("../../utils/props").BuildPropReturn<StringConstructor, "", unknown, unknown, unknown>;
    readonly icon: import("../../utils/props").BuildPropReturn<unknown, "info", unknown, "error" | "success" | "warning" | "info", unknown>;
}, {
    resultIcon: import("vue").ComputedRef<{
        class: "icon-success" | "icon-warning" | "icon-error" | "icon-info";
        component: import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions>;
    }>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    readonly title?: unknown;
    readonly subTitle?: unknown;
    readonly icon?: unknown;
} & {
    title: string;
    icon: import("../../utils/props").BuildPropType<unknown, "error" | "success" | "warning" | "info", unknown>;
    subTitle: string;
} & {}>, {
    title: string;
    icon: import("../../utils/props").BuildPropType<unknown, "error" | "success" | "warning" | "info", unknown>;
    subTitle: string;
}>> & Record<string, any>;
export default ElResult;
export * from './src/result';
