{"version":3,"file":"index.vue_vue&type=template&id=2f09f285&lang.mjs","sources":["../../../../../../packages/components/autocomplete/src/index.vue?vue&type=template&id=2f09f285&lang.js"],"sourcesContent":["<template>\n  <el-popper\n    ref=\"popper\"\n    v-model:visible=\"suggestionVisible\"\n    :placement=\"placement\"\n    :popper-class=\"`el-autocomplete__popper ${popperClass}`\"\n    :append-to-body=\"popperAppendToBody\"\n    pure\n    manual-mode\n    :effect=\"Effect.LIGHT\"\n    trigger=\"click\"\n    transition=\"el-zoom-in-top\"\n    :gpu-acceleration=\"false\"\n  >\n    <template #trigger>\n      <div\n        v-clickoutside=\"close\"\n        :class=\"['el-autocomplete', $attrs.class]\"\n        :style=\"$attrs.style\"\n        role=\"combobox\"\n        aria-haspopup=\"listbox\"\n        :aria-expanded=\"suggestionVisible\"\n        :aria-owns=\"id\"\n      >\n        <el-input\n          ref=\"inputRef\"\n          v-bind=\"attrs\"\n          :model-value=\"modelValue\"\n          @input=\"handleInput\"\n          @change=\"handleChange\"\n          @focus=\"handleFocus\"\n          @blur=\"handleBlur\"\n          @clear=\"handleClear\"\n          @keydown.up.prevent=\"highlight(highlightedIndex - 1)\"\n          @keydown.down.prevent=\"highlight(highlightedIndex + 1)\"\n          @keydown.enter=\"handleKeyEnter\"\n          @keydown.tab=\"close\"\n        >\n          <template v-if=\"$slots.prepend\" #prepend>\n            <slot name=\"prepend\"></slot>\n          </template>\n          <template v-if=\"$slots.append\" #append>\n            <slot name=\"append\"></slot>\n          </template>\n          <template v-if=\"$slots.prefix\" #prefix>\n            <slot name=\"prefix\"></slot>\n          </template>\n          <template v-if=\"$slots.suffix\" #suffix>\n            <slot name=\"suffix\"></slot>\n          </template>\n        </el-input>\n      </div>\n    </template>\n    <template #default>\n      <div\n        ref=\"regionRef\"\n        :class=\"[\n          'el-autocomplete-suggestion',\n          suggestionLoading && 'is-loading',\n        ]\"\n        :style=\"{ minWidth: dropdownWidth, outline: 'none' }\"\n        role=\"region\"\n      >\n        <el-scrollbar\n          tag=\"ul\"\n          wrap-class=\"el-autocomplete-suggestion__wrap\"\n          view-class=\"el-autocomplete-suggestion__list\"\n        >\n          <li v-if=\"suggestionLoading\">\n            <el-icon class=\"is-loading\"><loading /></el-icon>\n          </li>\n          <template v-else>\n            <li\n              v-for=\"(item, index) in suggestions\"\n              :id=\"`${id}-item-${index}`\"\n              :key=\"index\"\n              :class=\"{ highlighted: highlightedIndex === index }\"\n              role=\"option\"\n              :aria-selected=\"highlightedIndex === index\"\n              @click=\"select(item)\"\n            >\n              <slot :item=\"item\">{{ item[valueKey] }}</slot>\n            </li>\n          </template>\n        </el-scrollbar>\n      </div>\n    </template>\n  </el-popper>\n</template>\n\n<script lang=\"ts\">\nimport {\n  defineComponent,\n  ref,\n  computed,\n  onMounted,\n  onUpdated,\n  nextTick,\n  watch,\n} from 'vue'\nimport { NOOP } from '@vue/shared'\nimport debounce from 'lodash/debounce'\nimport { useAttrs } from '@element-plus/hooks'\nimport { ClickOutside } from '@element-plus/directives'\nimport { generateId, isArray } from '@element-plus/utils/util'\nimport { UPDATE_MODEL_EVENT } from '@element-plus/utils/constants'\nimport { throwError } from '@element-plus/utils/error'\nimport ElInput from '@element-plus/components/input'\nimport ElScrollbar from '@element-plus/components/scrollbar'\nimport ElPopper, { Effect } from '@element-plus/components/popper'\nimport ElIcon from '@element-plus/components/icon'\nimport { Loading } from '@element-plus/icons'\n\nimport type { Placement } from '@element-plus/components/popper'\nimport type { PropType } from 'vue'\n\nexport default defineComponent({\n  name: 'ElAutocomplete',\n  components: {\n    ElPopper,\n    ElInput,\n    ElScrollbar,\n    ElIcon,\n    Loading,\n  },\n  directives: {\n    clickoutside: ClickOutside,\n  },\n  inheritAttrs: false,\n  props: {\n    valueKey: {\n      type: String,\n      default: 'value',\n    },\n    modelValue: {\n      type: [String, Number],\n      default: '',\n    },\n    debounce: {\n      type: Number,\n      default: 300,\n    },\n    placement: {\n      type: String as PropType<Placement>,\n      validator: (val: string): boolean => {\n        return [\n          'top',\n          'top-start',\n          'top-end',\n          'bottom',\n          'bottom-start',\n          'bottom-end',\n        ].includes(val)\n      },\n      default: 'bottom-start',\n    },\n    fetchSuggestions: {\n      type: Function as PropType<\n        (queryString: string, cb: (data: any[]) => void) => void\n      >,\n      default: NOOP,\n    },\n    popperClass: {\n      type: String,\n      default: '',\n    },\n    triggerOnFocus: {\n      type: Boolean,\n      default: true,\n    },\n    selectWhenUnmatched: {\n      type: Boolean,\n      default: false,\n    },\n    hideLoading: {\n      type: Boolean,\n      default: false,\n    },\n    popperAppendToBody: {\n      type: Boolean,\n      default: true,\n    },\n    highlightFirstItem: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  emits: [\n    UPDATE_MODEL_EVENT,\n    'input',\n    'change',\n    'focus',\n    'blur',\n    'clear',\n    'select',\n  ],\n  setup(props, ctx) {\n    const attrs = useAttrs()\n    const suggestions = ref([])\n    const highlightedIndex = ref(-1)\n    const dropdownWidth = ref('')\n    const activated = ref(false)\n    const suggestionDisabled = ref(false)\n    const loading = ref(false)\n    const inputRef = ref(null)\n    const regionRef = ref(null)\n    const popper = ref(null)\n\n    const id = computed(() => {\n      return `el-autocomplete-${generateId()}`\n    })\n    const suggestionVisible = computed(() => {\n      const isValidData =\n        isArray(suggestions.value) && suggestions.value.length > 0\n      return (isValidData || loading.value) && activated.value\n    })\n    const suggestionLoading = computed(() => {\n      return !props.hideLoading && loading.value\n    })\n\n    const updatePopperPosition = () => {\n      nextTick(popper.value.update)\n    }\n\n    watch(suggestionVisible, () => {\n      dropdownWidth.value = `${inputRef.value.$el.offsetWidth}px`\n    })\n\n    onMounted(() => {\n      inputRef.value.inputOrTextarea.setAttribute('role', 'textbox')\n      inputRef.value.inputOrTextarea.setAttribute('aria-autocomplete', 'list')\n      inputRef.value.inputOrTextarea.setAttribute('aria-controls', 'id')\n      inputRef.value.inputOrTextarea.setAttribute(\n        'aria-activedescendant',\n        `${id.value}-item-${highlightedIndex.value}`\n      )\n      const $ul = regionRef.value.querySelector(\n        '.el-autocomplete-suggestion__list'\n      )\n      $ul.setAttribute('role', 'listbox')\n      $ul.setAttribute('id', id.value)\n    })\n\n    onUpdated(updatePopperPosition)\n\n    const getData = (queryString) => {\n      if (suggestionDisabled.value) {\n        return\n      }\n      loading.value = true\n      updatePopperPosition()\n      props.fetchSuggestions(queryString, (suggestionsArg) => {\n        loading.value = false\n        if (suggestionDisabled.value) {\n          return\n        }\n        if (isArray(suggestionsArg)) {\n          suggestions.value = suggestionsArg\n          highlightedIndex.value = props.highlightFirstItem ? 0 : -1\n        } else {\n          throwError(\n            'ElAutocomplete',\n            'autocomplete suggestions must be an array'\n          )\n        }\n      })\n    }\n    const debouncedGetData = debounce(getData, props.debounce)\n    const handleInput = (value) => {\n      ctx.emit('input', value)\n      ctx.emit(UPDATE_MODEL_EVENT, value)\n      suggestionDisabled.value = false\n      if (!props.triggerOnFocus && !value) {\n        suggestionDisabled.value = true\n        suggestions.value = []\n        return\n      }\n      debouncedGetData(value)\n    }\n    const handleChange = (value) => {\n      ctx.emit('change', value)\n    }\n    const handleFocus = (e) => {\n      activated.value = true\n      ctx.emit('focus', e)\n      if (props.triggerOnFocus) {\n        debouncedGetData(props.modelValue)\n      }\n    }\n    const handleBlur = (e) => {\n      ctx.emit('blur', e)\n    }\n    const handleClear = () => {\n      activated.value = false\n      ctx.emit(UPDATE_MODEL_EVENT, '')\n      ctx.emit('clear')\n    }\n    const handleKeyEnter = () => {\n      if (\n        suggestionVisible.value &&\n        highlightedIndex.value >= 0 &&\n        highlightedIndex.value < suggestions.value.length\n      ) {\n        select(suggestions.value[highlightedIndex.value])\n      } else if (props.selectWhenUnmatched) {\n        ctx.emit('select', { value: props.modelValue })\n        nextTick(() => {\n          suggestions.value = []\n          highlightedIndex.value = -1\n        })\n      }\n    }\n    const close = () => {\n      activated.value = false\n    }\n    const focus = () => {\n      inputRef.value.focus()\n    }\n    const select = (item) => {\n      ctx.emit('input', item[props.valueKey])\n      ctx.emit(UPDATE_MODEL_EVENT, item[props.valueKey])\n      ctx.emit('select', item)\n      nextTick(() => {\n        suggestions.value = []\n        highlightedIndex.value = -1\n      })\n    }\n    const highlight = (index) => {\n      if (!suggestionVisible.value || loading.value) {\n        return\n      }\n      if (index < 0) {\n        highlightedIndex.value = -1\n        return\n      }\n      if (index >= suggestions.value.length) {\n        index = suggestions.value.length - 1\n      }\n      const suggestion = regionRef.value.querySelector(\n        '.el-autocomplete-suggestion__wrap'\n      )\n      const suggestionList = suggestion.querySelectorAll(\n        '.el-autocomplete-suggestion__list li'\n      )\n      const highlightItem = suggestionList[index]\n      const scrollTop = suggestion.scrollTop\n      const { offsetTop, scrollHeight } = highlightItem\n\n      if (offsetTop + scrollHeight > scrollTop + suggestion.clientHeight) {\n        suggestion.scrollTop += scrollHeight\n      }\n      if (offsetTop < scrollTop) {\n        suggestion.scrollTop -= scrollHeight\n      }\n      highlightedIndex.value = index\n      inputRef.value.inputOrTextarea.setAttribute(\n        'aria-activedescendant',\n        `${id.value}-item-${highlightedIndex.value}`\n      )\n    }\n\n    return {\n      Effect,\n\n      attrs,\n      suggestions,\n      highlightedIndex,\n      dropdownWidth,\n      activated,\n      suggestionDisabled,\n      loading,\n      inputRef,\n      regionRef,\n      popper,\n\n      id,\n      suggestionVisible,\n      suggestionLoading,\n\n      getData,\n      handleInput,\n      handleChange,\n      handleFocus,\n      handleBlur,\n      handleClear,\n      handleKeyEnter,\n      close,\n      focus,\n      select,\n      highlight,\n    }\n  },\n})\n</script>\n"],"names":["_createBlock","_createElementVNode","_createVNode","_mergeProps","_renderSlot","_createElementBlock"],"mappings":";;;;;;;;;;;;sBACEA;IACE,KAAI;AAAA,IACI,SAAS;8DAAA;IAChB,WAAW;IACX,2CAAyC;IACzC,kBAAgB;IACjB,MAAA;AAAA,IACA,eAAA;AAAA,IACC,QAAQ,YAAO;AAAA,IAChB,SAAQ;AAAA,IACR,YAAW;AAAA,IACV,oBAAkB;AAAA;IAER,iBACT;qBAAAC;QAEG,0CAA2B,YAAO;AAAA,QAClC,sBAAO,YAAO;AAAA,QACf,MAAK;AAAA,QACL,iBAAc;AAAA,QACb,iBAAe;QACf,aAAW;;QAEZC,iCAAAC,aACE,KAAI,cACI;UACP,eAAa;UACb,SAAO;UACP,UAAQ;UACR,SAAO;UACP,QAAM;UACN,SAAO;UACP;yEAAoB,eAAU;yEACR,eAAU;qBACjB;qBACF;;;UAEE,YAAO;kBAAU;AAAA,wBAC/B;cAAAC;;;UAEc,YAAO;kBAAS;AAAA,wBAC9B;cAAAA;;;UAEc,YAAO;kBAAS;AAAA,wBAC9B;cAAAA;;;UAEc,YAAO;kBAAS;AAAA,wBAC9B;cAAAA;;;;;kCAhCY;;;IAqCT,iBACT;MAAAH;QACE,KAAI;AAAA,QACH;;;;QAIA,kCAAmB;QACpB,MAAK;AAAA;QAELC;UACE,KAAI;AAAA,UACJ,cAAW;AAAA,UACX,cAAW;AAAA;2BAEX;YAAU,uCAAVG;cACEH,kCAAS,OAAM;iCAAa;kBAAAA,YAAW;AAAA;AAAA;;oCAGvCG,oDAC0B,mBAAhB,MAAM;kCADhBA;gBAEG,OAAO,gBAAW;AAAA,gBAClB,KAAK;AAAA,gBACL,qCAAsB,0BAAqB;AAAA,gBAC5C,MAAK;AAAA,gBACJ,iBAAe,0BAAqB;AAAA,gBACpC,qBAAO,YAAO;AAAA;gBAEfD,qCAAO,QAAP;kDAAsB,KAAK;;;;;;;;;;;;;;;"}