{"version":3,"file":"sv-panel.vue_vue&type=script&lang.mjs","sources":["../../../../../../../packages/components/color-picker/src/components/sv-panel.vue"],"sourcesContent":["<template>\n  <div\n    class=\"el-color-svpanel\"\n    :style=\"{\n      backgroundColor: background,\n    }\"\n  >\n    <div class=\"el-color-svpanel__white\"></div>\n    <div class=\"el-color-svpanel__black\"></div>\n    <div\n      class=\"el-color-svpanel__cursor\"\n      :style=\"{\n        top: cursorTop + 'px',\n        left: cursorLeft + 'px',\n      }\"\n    >\n      <div></div>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport {\n  defineComponent,\n  ref,\n  computed,\n  watch,\n  getCurrentInstance,\n  onMounted,\n} from 'vue'\nimport draggable from '../draggable'\n\nimport type { PropType } from 'vue'\nimport type Color from '../color'\n\nexport default defineComponent({\n  name: 'ElSlPanel',\n\n  props: {\n    color: {\n      type: Object as PropType<Color>,\n      required: true,\n    },\n  },\n  setup(props) {\n    // instance\n    const instance = getCurrentInstance()\n    // data\n    const cursorTop = ref(0)\n    const cursorLeft = ref(0)\n    const background = ref('hsl(0, 100%, 50%)')\n    const colorValue = computed(() => {\n      const hue = props.color.get('hue')\n      const value = props.color.get('value')\n      return { hue, value }\n    })\n    // methods\n    function update() {\n      const saturation = props.color.get('saturation')\n      const value = props.color.get('value')\n\n      const el = instance.vnode.el\n      const { clientWidth: width, clientHeight: height } = el\n\n      cursorLeft.value = (saturation * width) / 100\n      cursorTop.value = ((100 - value) * height) / 100\n\n      background.value = `hsl(${props.color.get('hue')}, 100%, 50%)`\n    }\n\n    function handleDrag(event) {\n      const el = instance.vnode.el\n      const rect = el.getBoundingClientRect()\n\n      let left = event.clientX - rect.left\n      let top = event.clientY - rect.top\n      left = Math.max(0, left)\n      left = Math.min(left, rect.width)\n\n      top = Math.max(0, top)\n      top = Math.min(top, rect.height)\n\n      cursorLeft.value = left\n      cursorTop.value = top\n      props.color.set({\n        saturation: (left / rect.width) * 100,\n        value: 100 - (top / rect.height) * 100,\n      })\n    }\n    // watch\n    watch(\n      () => colorValue.value,\n      () => {\n        update()\n      }\n    )\n    // mounted\n    onMounted(() => {\n      draggable(instance.vnode.el as HTMLElement, {\n        drag: (event) => {\n          handleDrag(event)\n        },\n        end: (event) => {\n          handleDrag(event)\n        },\n      })\n\n      update()\n    })\n    return {\n      cursorTop,\n      cursorLeft,\n      background,\n      colorValue,\n      handleDrag,\n      update,\n    }\n  },\n})\n</script>\n"],"names":[],"mappings":";;;AAmCA,aAAe,gBAAgB;AAAA,EAC7B,MAAM;AAAA,EAEN,OAAO;AAAA,IACL,OAAO;AAAA,MACL,MAAM;AAAA,MACN,UAAU;AAAA;AAAA;AAAA,EAGd,MAAM,OAAO;AAEX,UAAM,WAAW;AAEjB,UAAM,YAAY,IAAI;AACtB,UAAM,aAAa,IAAI;AACvB,UAAM,aAAa,IAAI;AACvB,UAAM,aAAa,SAAS,MAAM;AAChC,YAAM,MAAM,MAAM,MAAM,IAAI;AAC5B,YAAM,QAAQ,MAAM,MAAM,IAAI;AAC9B,aAAO,EAAE,KAAK;AAAA;AAGhB,sBAAkB;AAChB,YAAM,aAAa,MAAM,MAAM,IAAI;AACnC,YAAM,QAAQ,MAAM,MAAM,IAAI;AAE9B,YAAM,KAAK,SAAS,MAAM;AAC1B,YAAM,EAAE,aAAa,OAAO,cAAc,WAAW;AAErD,iBAAW,QAAS,aAAa,QAAS;AAC1C,gBAAU,QAAU,OAAM,SAAS,SAAU;AAE7C,iBAAW,QAAQ,OAAO,MAAM,MAAM,IAAI;AAAA;AAG5C,wBAAoB,OAAO;AACzB,YAAM,KAAK,SAAS,MAAM;AAC1B,YAAM,OAAO,GAAG;AAEhB,UAAI,OAAO,MAAM,UAAU,KAAK;AAChC,UAAI,MAAM,MAAM,UAAU,KAAK;AAC/B,aAAO,KAAK,IAAI,GAAG;AACnB,aAAO,KAAK,IAAI,MAAM,KAAK;AAE3B,YAAM,KAAK,IAAI,GAAG;AAClB,YAAM,KAAK,IAAI,KAAK,KAAK;AAEzB,iBAAW,QAAQ;AACnB,gBAAU,QAAQ;AAClB,YAAM,MAAM,IAAI;AAAA,QACd,YAAa,OAAO,KAAK,QAAS;AAAA,QAClC,OAAO,MAAO,MAAM,KAAK,SAAU;AAAA;AAAA;AAIvC,UACE,MAAM,WAAW,OACjB,MAAM;AACJ;AAAA;AAIJ,cAAU,MAAM;AACd,gBAAU,SAAS,MAAM,IAAmB;AAAA,QAC1C,MAAM,CAAC,UAAU;AACf,qBAAW;AAAA;AAAA,QAEb,KAAK,CAAC,UAAU;AACd,qBAAW;AAAA;AAAA;AAIf;AAAA;AAEF,WAAO;AAAA,MACL;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA;AAAA;AAAA;;;;"}